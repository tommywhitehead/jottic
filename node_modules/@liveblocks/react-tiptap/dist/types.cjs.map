{"version":3,"file":"types.cjs","sources":["../src/types.ts"],"sourcesContent":["import type {\n  ContextualPromptContext,\n  ContextualPromptResponse,\n  MentionData,\n  Relax,\n  TextEditorType,\n  ThreadData,\n} from \"@liveblocks/core\";\nimport type { LiveblocksYjsProvider } from \"@liveblocks/yjs\";\nimport type { Content, Range } from \"@tiptap/core\";\nimport { PluginKey } from \"@tiptap/pm/state\";\nimport type { DecorationSet } from \"@tiptap/pm/view\";\nimport type { ChainedCommands, SingleCommands } from \"@tiptap/react\";\nimport type { ProsemirrorBinding } from \"y-prosemirror\";\nimport type { Doc, PermanentUserData, Snapshot } from \"yjs\";\n\nexport const LIVEBLOCKS_MENTION_KEY = new PluginKey(\"lb-plugin-mention\");\nexport const LIVEBLOCKS_MENTION_PASTE_KEY = new PluginKey(\n  \"lb-plugin-mention-paste\"\n);\nexport const LIVEBLOCKS_MENTION_NOTIFIER_KEY = new PluginKey(\n  \"lb-plugin-mention-notify\"\n);\n\nexport const LIVEBLOCKS_MENTION_EXTENSION = \"liveblocksMentionExt\";\nexport const LIVEBLOCKS_MENTION_TYPE = \"liveblocksMention\";\nexport const LIVEBLOCKS_GROUP_MENTION_TYPE = \"liveblocksGroupMention\";\n\nexport const THREADS_ACTIVE_SELECTION_PLUGIN = new PluginKey(\n  \"lb-threads-active-selection-plugin\"\n);\nexport const THREADS_PLUGIN_KEY = new PluginKey<ThreadPluginState>(\n  \"lb-threads-plugin\"\n);\nexport const AI_TOOLBAR_SELECTION_PLUGIN = new PluginKey(\n  \"lb-ai-toolbar-selection-plugin\"\n);\n\nexport const LIVEBLOCKS_COMMENT_MARK_TYPE = \"liveblocksCommentMark\";\n\n/**\n * @beta\n */\nexport type ResolveContextualPromptArgs = {\n  /**\n   * The prompt being requested by the user.\n   */\n  prompt: string;\n\n  /**\n   * The context of the document and its current selection.\n   */\n  context: ContextualPromptContext;\n\n  /**\n   * The previous request and its response, if this is a follow-up request.\n   */\n  previous?: {\n    prompt: string;\n    response: ContextualPromptResponse;\n  };\n\n  /**\n   * An abort signal that can be used to cancel requests.\n   */\n  signal: AbortSignal;\n};\n\n/**\n * @beta\n */\nexport type ResolveContextualPromptResponse = ContextualPromptResponse;\n\nexport interface AiConfiguration {\n  /**\n   * The AI's name. (\"Ask {name} anything…\", \"{name} is thinking…\", etc)\n   */\n  name?: string;\n\n  /**\n   * A function that returns an a response to a contextual prompt.\n   */\n  resolveContextualPrompt?: (\n    args: ResolveContextualPromptArgs\n  ) => Promise<ContextualPromptResponse>;\n}\n\nexport type LiveblocksExtensionOptions = {\n  field?: string;\n  comments?: boolean; // | CommentsConfiguration\n  mentions?: boolean; // | MentionsConfiguration\n  ai?: boolean | AiConfiguration;\n  offlineSupport_experimental?: boolean;\n  threads_experimental?: ThreadData[];\n  initialContent?: Content;\n  enablePermanentUserData?: boolean;\n  /**\n   * @internal\n   * For reporting another text editor type from a\n   * text editor extended from `TipTap` such as our `BlockNote` integration.\n   *\n   * Only useful for Liveblocks developers, not for end users.\n   */\n  textEditorType?: TextEditorType;\n};\n\nexport type LiveblocksExtensionStorage = {\n  unsubs: (() => void)[];\n  doc: Doc;\n  provider: LiveblocksYjsProvider;\n  permanentUserData?: PermanentUserData;\n};\n\nexport type CommentsExtensionStorage = {\n  pendingComment: boolean;\n};\n\nexport const enum ThreadPluginActions {\n  SET_SELECTED_THREAD_ID = \"SET_SELECTED_THREAD_ID\",\n}\n\nexport type AiExtensionOptions = Required<\n  Pick<AiConfiguration, \"name\" | \"resolveContextualPrompt\">\n> & {\n  doc: Doc | undefined;\n  pud: PermanentUserData | undefined;\n};\n\n/**\n * The state of the AI toolbar.\n *\n *                             ┌────────────────────────────────────────────────────────────────────────────────┐\n *                             │                                                                                │\n *                             │ ┌──────────────────────────────────────────────┐                               │\n *                             ▼ ▼                                              │                               │\n *              ┌───────$closeAiToolbar()───────┐                               │                               │\n *              ▼                               ◇                               ◇                               ◇\n *  ┌───────────────────────┐       ┌───────────────────────┐       ┌───────────────────────┐       ┌───────────────────────┐\n *  │        CLOSED         │       │        ASKING         │       │       THINKING        │       │       REVIEWING       │\n *  └───────────────────────┘       └───────────────────────┘       └───────────────────────┘       └───────────────────────┘\n *           ▲ ◇ ◇                           ▲ ▲ ◇ ▲                          ▲ ◇                             ▲ ◇ ◇\n *           │ │ └───$openAiToolbarAsking()──┘ │ │ └ ─ ─ ─ ─ ─ ─⚠─ ─ ─ ─ ─ ─ ─│─├── ─ ─ ─ ─ ─ ─✓─ ─ ─ ─ ─ ─ ─ ┘ │ │\n *           │ │                               │ ▼                            │ │                               │ │\n *           │ └─────────────────$startAiToolbarThinking(prompt)──────────────┘ │                               │ │\n *           │                                 │ ▲                              │                               │ │\n *           │                                 │ └──────────────────────────────┼───────────────────────────────┘ │\n *           │                                 │                                │                                 │\n *           │                                 └───$cancelAiToolbarThinking()───┘                                 │\n *           │                                                                                                    │\n *           └─────────────────────────────────────$acceptAiToolbarResponse()─────────────────────────────────────┘\n *\n */\nexport type AiToolbarState = Relax<\n  | {\n      phase: \"closed\";\n    }\n  | {\n      phase: \"asking\";\n\n      /**\n       * The selection stored when opening the AI toolbar.\n       */\n      initialSelection: Range;\n\n      /**\n       * The custom prompt being written in the toolbar.\n       */\n      customPrompt: string;\n\n      /**\n       * A potential error that occurred during the last AI request.\n       */\n      error?: Error;\n    }\n  | {\n      phase: \"thinking\";\n\n      /**\n       * The selection stored when opening the AI toolbar.\n       */\n      initialSelection: Range;\n\n      /**\n       * The custom prompt being written in the toolbar.\n       */\n      customPrompt: string;\n\n      /**\n       * An abort controller to cancel the AI request.\n       */\n      abortController: AbortController;\n\n      /**\n       * The prompt sent to the AI.\n       */\n      prompt: string;\n\n      /**\n       * The previous response if this \"thinking\" phase is a refinement.\n       */\n      previousResponse?: ContextualPromptResponse;\n    }\n  | {\n      phase: \"reviewing\";\n\n      /**\n       * The selection stored when opening the AI toolbar.\n       */\n      initialSelection: Range;\n\n      /**\n       * The custom prompt being written in the toolbar.\n       */\n      customPrompt: string;\n\n      /**\n       * The prompt sent to the AI.\n       */\n      prompt: string;\n\n      /**\n       * The response of the AI request.\n       */\n      response: ContextualPromptResponse;\n    }\n>;\n\nexport type AiExtensionStorage = {\n  name: string;\n  state: AiToolbarState;\n  snapshot?: Snapshot;\n};\n\nexport type ThreadPluginState = {\n  threadPositions: Map<string, { from: number; to: number }>;\n  selectedThreadId: string | null;\n  selectedThreadPos: number | null;\n  decorations: DecorationSet;\n};\n\nexport type FloatingPosition = \"top\" | \"bottom\";\n\nexport type ExtendedCommands<\n  T extends string,\n  A extends any[] = [],\n> = SingleCommands & Record<T, (...args: A) => boolean>;\n\nexport type ExtendedChainedCommands<\n  T extends string,\n  A extends any[] = [],\n> = ChainedCommands & Record<T, (...args: A) => ChainedCommands>;\n\nexport type ChainedAiCommands = ChainedCommands & {\n  [K in keyof AiCommands]: (\n    ...args: Parameters<AiCommands[K]>\n  ) => ChainedCommands;\n};\n\nexport type CommentsCommands<ReturnType = boolean> = {\n  /**\n   * Add a comment\n   */\n  addComment: (id: string) => ReturnType;\n  selectThread: (id: string | null) => ReturnType;\n  addPendingComment: () => ReturnType;\n\n  /** @internal */\n  closePendingComment: () => ReturnType;\n};\n\nexport type AiCommands<ReturnType = boolean> = {\n  /**\n   * Open the AI toolbar, with an optional prompt.\n   */\n  askAi: (prompt?: string) => ReturnType;\n\n  /**\n   * Close the AI toolbar.\n   */\n  closeAi: () => ReturnType;\n\n  // Transitions (see AiToolbarState)\n\n  /**\n   * @internal\n   * @transition\n   *\n   * Close the AI toolbar.\n   */\n  $closeAiToolbar: () => ReturnType;\n\n  /**\n   * @internal\n   * @transition\n   *\n   * Accept the current AI response and close the AI toolbar.\n   */\n  $acceptAiToolbarResponse: () => ReturnType;\n\n  /**\n   * @internal\n   * @transition\n   *\n   * Open the AI toolbar in the \"asking\" phase.\n   */\n  $openAiToolbarAsking: () => ReturnType;\n\n  /**\n   * @internal\n   * @transition\n   *\n   * Set (and open if not already open) the AI toolbar in the \"thinking\" phase with the given prompt.\n   */\n  $startAiToolbarThinking: (\n    prompt: string,\n    withPreviousResponse?: boolean\n  ) => ReturnType;\n\n  /**\n   * @internal\n   * @transition\n   *\n   * Cancel the current \"thinking\" phase, going back to the \"asking\" phase.\n   */\n  $cancelAiToolbarThinking: () => ReturnType;\n\n  // Other\n\n  /**\n   * @internal\n   *\n   * Show the diff of the current \"reviewing\" phase.\n   */\n  _showAiToolbarReviewingDiff: () => ReturnType;\n\n  /**\n   * @internal\n   *\n   * Handle the success of the current \"thinking\" phase.\n   */\n  _handleAiToolbarThinkingSuccess: (\n    response: ContextualPromptResponse\n  ) => ReturnType;\n\n  /**\n   * @internal\n   *\n   * Handle an error of the current \"thinking\" phase.\n   */\n  _handleAiToolbarThinkingError: (error: unknown) => ReturnType;\n\n  /**\n   * @internal\n   *\n   * Update the current custom AI prompt.\n   */\n  _updateAiToolbarCustomPrompt: (\n    customPrompt: string | ((currentCustomPrompt: string) => string)\n  ) => ReturnType;\n};\n\nexport type YSyncPluginState = {\n  binding: ProsemirrorBinding;\n};\n\nexport type TiptapMentionData = MentionData & {\n  notificationId: string;\n};\n\nexport type SerializedTiptapMentionData = TiptapMentionData extends infer T\n  ? T extends { kind: \"group\" }\n    ? Omit<T, \"userIds\"> & { userIds?: string }\n    : T\n  : never;\n"],"names":["PluginKey","ThreadPluginActions"],"mappings":";;;;AAgBa,MAAA,sBAAA,GAAyB,IAAIA,eAAA,CAAU,mBAAmB,EAAA;AAChE,MAAM,+BAA+B,IAAIA,eAAA;AAAA,EAC9C,yBAAA;AACF,EAAA;AACO,MAAM,kCAAkC,IAAIA,eAAA;AAAA,EACjD,0BAAA;AACF,EAAA;AAEO,MAAM,4BAA+B,GAAA,uBAAA;AACrC,MAAM,uBAA0B,GAAA,oBAAA;AAChC,MAAM,6BAAgC,GAAA,yBAAA;AAEtC,MAAM,kCAAkC,IAAIA,eAAA;AAAA,EACjD,oCAAA;AACF,EAAA;AACO,MAAM,qBAAqB,IAAIA,eAAA;AAAA,EACpC,mBAAA;AACF,EAAA;AACO,MAAM,8BAA8B,IAAIA,eAAA;AAAA,EAC7C,gCAAA;AACF,EAAA;AAEO,MAAM,4BAA+B,GAAA,wBAAA;AA+E1B,IAAA,mBAAA,qBAAAC,oBAAX,KAAA;AACL,EAAAA,qBAAA,wBAAyB,CAAA,GAAA,wBAAA,CAAA;AADT,EAAAA,OAAAA,oBAAAA,CAAAA;AAAA,CAAA,EAAA,mBAAA,IAAA,EAAA;;;;;;;;;;;;;;"}