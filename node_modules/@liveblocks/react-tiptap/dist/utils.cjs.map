{"version":3,"file":"utils.cjs","sources":["../src/utils.ts"],"sourcesContent":["import type { ClientRectObject } from \"@floating-ui/react-dom\";\nimport { assertNever, type ContextualPromptContext } from \"@liveblocks/core\";\nimport type { Editor, Range } from \"@tiptap/core\";\nimport type { Node as ProseMirrorNode } from \"@tiptap/pm/model\";\nimport { Fragment } from \"@tiptap/pm/model\";\nimport {\n  type EditorState,\n  type Selection,\n  TextSelection,\n} from \"@tiptap/pm/state\";\nimport {\n  getRelativeSelection,\n  relativePositionToAbsolutePosition,\n  ySyncPluginKey,\n} from \"y-prosemirror\";\nimport type { RelativePosition } from \"yjs\";\n\nimport type {\n  SerializedTiptapMentionData,\n  TiptapMentionData,\n  YSyncPluginState,\n} from \"./types\";\nimport {\n  LIVEBLOCKS_GROUP_MENTION_TYPE,\n  LIVEBLOCKS_MENTION_TYPE,\n} from \"./types\";\n\nconst CONTEXT_TRUNCATION = \"[â€¦]\";\nconst CONTEXT_BLOCK_SEPARATOR = \"\\n\";\n\nexport const getRelativeSelectionFromState = (state: EditorState) => {\n  const pluginState = ySyncPluginKey.getState(state) as YSyncPluginState;\n  if (!pluginState) return null;\n  return getRelativeSelection(pluginState.binding, state);\n};\n\nexport const getRangeFromRelativeSelections = (\n  pos: { anchor: RelativePosition; head: RelativePosition },\n  state: EditorState\n) => {\n  const pluginState = ySyncPluginKey.getState(state) as YSyncPluginState;\n  if (!pluginState || !pluginState.binding) return { from: 0, to: 0 };\n  const { doc, type, mapping } = pluginState.binding;\n  const anchor =\n    relativePositionToAbsolutePosition(doc, type, pos.anchor, mapping) ?? 0;\n  const head =\n    relativePositionToAbsolutePosition(doc, type, pos.head, mapping) ?? 0;\n\n  const from = anchor > head ? head : anchor;\n  const to = anchor > head ? anchor : head;\n  return { from, to };\n};\n\nexport const getRectFromCoords = (coords: {\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n}): ClientRectObject => {\n  return {\n    ...coords,\n    x: coords.left,\n    y: coords.top,\n    width: coords.right - coords.left,\n    height: coords.bottom - coords.top,\n  };\n};\n\nexport const getMentionsFromNode = (\n  node: ProseMirrorNode,\n  range: Range\n): Map<string, TiptapMentionData> => {\n  const mentions = new Map<string, TiptapMentionData>();\n\n  node.nodesBetween(range.from, range.to, (child) => {\n    if (\n      child.type.name === LIVEBLOCKS_MENTION_TYPE ||\n      child.type.name === LIVEBLOCKS_GROUP_MENTION_TYPE\n    ) {\n      const mention = child.attrs as Omit<SerializedTiptapMentionData, \"kind\">;\n\n      if (mention.id && mention.notificationId) {\n        if (child.type.name === LIVEBLOCKS_MENTION_TYPE) {\n          mentions.set(mention.notificationId, {\n            kind: \"user\",\n            id: mention.id,\n            notificationId: mention.notificationId,\n          });\n        } else if (child.type.name === LIVEBLOCKS_GROUP_MENTION_TYPE) {\n          let userIds: string[] | undefined;\n\n          if (mention.userIds) {\n            try {\n              const parsedUserIds = JSON.parse(mention.userIds) as string[];\n\n              if (Array.isArray(parsedUserIds)) {\n                userIds = parsedUserIds;\n              }\n            } catch {\n              userIds = undefined;\n            }\n          }\n\n          mentions.set(mention.notificationId, {\n            kind: \"group\",\n            id: mention.id,\n            userIds,\n            notificationId: mention.notificationId,\n          });\n        } else {\n          assertNever(child.type.name, \"Unexpected mention kind\");\n        }\n      }\n    }\n  });\n\n  return mentions;\n};\n\n// How to modify data in transformPasted, inspired by: https://discuss.prosemirror.net/t/modify-specific-node-on-copy-and-paste-in-clipboard/4901/4\nexport const mapFragment = (\n  fragment: Fragment,\n  callback: (\n    node: ProseMirrorNode\n  ) => ProseMirrorNode | ProseMirrorNode[] | Fragment | null\n): Fragment => {\n  const content: ProseMirrorNode[] = [];\n  fragment.forEach((node) => {\n    if (node.content.childCount > 0) {\n      content.push(\n        node.type.create(node.attrs, mapFragment(node.content, callback))\n      );\n      return;\n    }\n    content.push(callback(node) as ProseMirrorNode);\n  });\n\n  return Fragment.from(content);\n};\n\nexport function getDomRangeFromSelection(editor: Editor, selection: Selection) {\n  if (selection.from === selection.to) {\n    const { parent, parentOffset } = selection.$from;\n\n    // If the selection is collapsed and in an empty block node or at the end\n    // of a text node, extend it to the entire node\n    if (\n      (parent.isBlock && parent.content.size === 0) ||\n      (parent.isTextblock && parentOffset === parent.content.size)\n    ) {\n      selection = TextSelection.create(\n        editor.state.doc,\n        selection.$from.before(),\n        selection.$from.after()\n      );\n    }\n  }\n\n  const from = editor.view.domAtPos(selection.from);\n  const to = editor.view.domAtPos(selection.to);\n\n  const domRange = document.createRange();\n  domRange.setStart(from.node, from.offset);\n  domRange.setEnd(to.node, to.offset);\n\n  return domRange;\n}\n\nexport function compareSelections(\n  a: Selection | null | undefined,\n  b: Selection | null | undefined\n) {\n  if (!a || !b) {\n    return false;\n  }\n\n  return a.eq(b);\n}\n\nexport function getContextualPromptContext(\n  editor: Editor,\n  maxLength = 10_000\n): ContextualPromptContext {\n  const { selection, doc } = editor.state;\n\n  const selectionLength = selection.to - selection.from;\n\n  if (maxLength >= doc.content.size) {\n    // If the document is smaller than the maximum length, return the entire document\n    return {\n      beforeSelection: doc.textBetween(\n        0,\n        selection.from,\n        CONTEXT_BLOCK_SEPARATOR\n      ),\n      selection: doc.textBetween(\n        selection.from,\n        selection.to,\n        CONTEXT_BLOCK_SEPARATOR\n      ),\n      afterSelection: doc.textBetween(\n        selection.to,\n        doc.content.size,\n        CONTEXT_BLOCK_SEPARATOR\n      ),\n    };\n  } else if (selectionLength > maxLength) {\n    // If the selection is too large, truncate its middle to still allow continuations\n    const selectionStart = doc.textBetween(\n      selection.from,\n      selection.from + Math.floor(maxLength / 2) - CONTEXT_TRUNCATION.length,\n      CONTEXT_BLOCK_SEPARATOR\n    );\n    const selectionEnd = doc.textBetween(\n      selection.to - Math.floor(maxLength / 2) + CONTEXT_TRUNCATION.length,\n      selection.to,\n      CONTEXT_BLOCK_SEPARATOR\n    );\n\n    return {\n      beforeSelection: \"\",\n      selection: `${selectionStart}${CONTEXT_TRUNCATION}${selectionEnd}`,\n      afterSelection: \"\",\n    };\n  } else {\n    // If the selection is smaller than (or equal to) the maximum length, extract as much as possible from the document around the selection\n\n    // Start by taking as much as possible after the selection\n    let beforeLength = Math.min(\n      selection.from,\n      Math.floor((maxLength - selectionLength) / 2)\n    );\n    const afterLength = Math.min(\n      doc.content.size - selection.to,\n      maxLength - selectionLength - beforeLength\n    );\n\n    // If needed (e.g. the selection is near the end), compensate before the selection\n    if (beforeLength + afterLength + selectionLength < maxLength) {\n      beforeLength = Math.min(\n        selection.from,\n        maxLength - selectionLength - afterLength\n      );\n    }\n\n    let beforeSelection = doc.textBetween(\n      Math.max(0, selection.from - beforeLength),\n      selection.from,\n      CONTEXT_BLOCK_SEPARATOR\n    );\n    let afterSelection = doc.textBetween(\n      selection.to,\n      Math.min(doc.content.size, selection.to + afterLength),\n      CONTEXT_BLOCK_SEPARATOR\n    );\n\n    // Add leading truncation if `beforeSelection` doesn't contain the document's start\n    if (selection.from - beforeLength > 0) {\n      beforeSelection = `${CONTEXT_TRUNCATION}${beforeSelection}`;\n    }\n\n    // Add trailing truncation if `afterSelection` doesn't contain the document's end\n    if (selection.to + afterLength < doc.content.size) {\n      afterSelection = `${afterSelection}${CONTEXT_TRUNCATION}`;\n    }\n\n    return {\n      beforeSelection,\n      selection: doc.textBetween(\n        selection.from,\n        selection.to,\n        CONTEXT_BLOCK_SEPARATOR\n      ),\n      afterSelection,\n    };\n  }\n}\n"],"names":["ySyncPluginKey","getRelativeSelection","relativePositionToAbsolutePosition","LIVEBLOCKS_MENTION_TYPE","LIVEBLOCKS_GROUP_MENTION_TYPE","assertNever","Fragment","TextSelection"],"mappings":"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"}