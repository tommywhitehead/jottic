'use strict';

var core = require('@tiptap/core');
var react = require('@tiptap/react');
var types = require('../types.cjs');
var Mention = require('./Mention.cjs');

const GroupMentionNode = core.Node.create({
  name: types.LIVEBLOCKS_GROUP_MENTION_TYPE,
  group: "inline",
  inline: true,
  selectable: true,
  atom: true,
  priority: 101,
  parseHTML() {
    return [
      {
        tag: "liveblocks-group-mention"
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["liveblocks-group-mention", core.mergeAttributes(HTMLAttributes)];
  },
  addNodeView() {
    return react.ReactNodeViewRenderer(Mention.Mention, {
      contentDOMElementTag: "span"
    });
  },
  addAttributes() {
    return {
      id: {
        default: null,
        parseHTML: (element) => element.getAttribute("data-id"),
        renderHTML: (attributes) => {
          if (!attributes.id) {
            return {};
          }
          return {
            "data-id": attributes.id
          };
        }
      },
      userIds: {
        default: void 0,
        parseHTML: (element) => {
          const userIdsAttribute = element.getAttribute("data-user-ids");
          if (!userIdsAttribute) {
            return void 0;
          }
          try {
            const userIds = JSON.parse(userIdsAttribute);
            return Array.isArray(userIds) ? userIds : void 0;
          } catch {
            return void 0;
          }
        },
        renderHTML: (attributes) => {
          if (!attributes.userIds || !Array.isArray(attributes.userIds)) {
            return {};
          }
          return {
            "data-user-ids": JSON.stringify(attributes.userIds)
          };
        }
      },
      notificationId: {
        default: null,
        parseHTML: (element) => element.getAttribute("data-notification-id"),
        renderHTML: (attributes) => {
          if (!attributes.notificationId) {
            return {};
          }
          return {
            "data-notification-id": attributes.notificationId
          };
        }
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      Backspace: () => this.editor.commands.command(({ tr, state }) => {
        let isMention = false;
        const { selection } = state;
        const { empty, anchor } = selection;
        if (!empty) {
          return false;
        }
        state.doc.nodesBetween(anchor - 1, anchor, (node, pos) => {
          if (node.type.name === this.name) {
            isMention = true;
            tr.insertText("", pos, pos + node.nodeSize);
          }
        });
        return isMention;
      })
    };
  }
});

exports.GroupMentionNode = GroupMentionNode;
//# sourceMappingURL=GroupMentionNode.cjs.map
