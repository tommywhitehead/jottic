{"version":3,"file":"Mention.cjs","sources":["../../src/mentions/Mention.tsx"],"sourcesContent":["import {\n  type GroupMentionData,\n  MENTION_CHARACTER,\n  type MentionData,\n  type UserMentionData,\n} from \"@liveblocks/core\";\nimport { cn, Group, User } from \"@liveblocks/react-ui/_private\";\nimport type { Node } from \"@tiptap/pm/model\";\nimport { NodeViewWrapper } from \"@tiptap/react\";\nimport { type ComponentPropsWithoutRef, forwardRef } from \"react\";\n\nimport {\n  LIVEBLOCKS_GROUP_MENTION_TYPE,\n  LIVEBLOCKS_MENTION_TYPE,\n  type SerializedTiptapMentionData,\n} from \"../types\";\n\ninterface MentionProps extends ComponentPropsWithoutRef<\"span\"> {\n  mention: MentionData;\n  isSelected: boolean;\n}\n\nconst UserMention = forwardRef<HTMLSpanElement, MentionProps>(\n  ({ mention, isSelected }, forwardedRef) => {\n    return (\n      <NodeViewWrapper\n        className={cn(\n          \"lb-root lb-mention lb-tiptap-mention\",\n          isSelected && \"lb-mention-selected\"\n        )}\n        as=\"span\"\n        ref={forwardedRef}\n      >\n        <span className=\"lb-mention-symbol\">{MENTION_CHARACTER}</span>\n        <User userId={mention.id} />\n      </NodeViewWrapper>\n    );\n  }\n);\n\nconst GroupMention = forwardRef<HTMLSpanElement, MentionProps>(\n  ({ mention, isSelected }, forwardedRef) => {\n    return (\n      <NodeViewWrapper\n        className={cn(\n          \"lb-root lb-mention lb-tiptap-mention\",\n          isSelected && \"lb-mention-selected\"\n        )}\n        as=\"span\"\n        ref={forwardedRef}\n      >\n        <span className=\"lb-mention-symbol\">{MENTION_CHARACTER}</span>\n        <Group groupId={mention.id} />\n      </NodeViewWrapper>\n    );\n  }\n);\n\nfunction deserializeGroupUserIds(\n  userIds: string | undefined\n): string[] | undefined {\n  if (typeof userIds !== \"string\") {\n    return undefined;\n  }\n\n  try {\n    const parsedUserIds = JSON.parse(userIds) as string[];\n\n    if (Array.isArray(parsedUserIds)) {\n      return parsedUserIds;\n    }\n\n    return undefined;\n  } catch {\n    return undefined;\n  }\n}\n\nexport const Mention = forwardRef<\n  HTMLSpanElement,\n  { node: Node; selected: boolean }\n>(({ node, selected: isSelected }, forwardedRef) => {\n  const attrs = node.attrs as Omit<SerializedTiptapMentionData, \"kind\">;\n\n  if (node.type.name === LIVEBLOCKS_MENTION_TYPE) {\n    const mention: UserMentionData = {\n      kind: \"user\",\n      id: attrs.id,\n    };\n\n    return (\n      <UserMention\n        mention={mention}\n        isSelected={isSelected}\n        ref={forwardedRef}\n      />\n    );\n  }\n\n  if (node.type.name === LIVEBLOCKS_GROUP_MENTION_TYPE) {\n    const mention: GroupMentionData = {\n      kind: \"group\",\n      id: attrs.id,\n      userIds: deserializeGroupUserIds(attrs.userIds),\n    };\n\n    return (\n      <GroupMention\n        mention={mention}\n        isSelected={isSelected}\n        ref={forwardedRef}\n      />\n    );\n  }\n\n  return null;\n});\n"],"names":["forwardRef","jsxs","NodeViewWrapper","cn","jsx","MENTION_CHARACTER","User","Group","LIVEBLOCKS_MENTION_TYPE","LIVEBLOCKS_GROUP_MENTION_TYPE"],"mappings":"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"}