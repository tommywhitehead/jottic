{"version":3,"file":"MentionExtension.cjs","sources":["../../src/mentions/MentionExtension.ts"],"sourcesContent":["import {\n  assertNever,\n  createInboxNotificationId,\n  MENTION_CHARACTER,\n} from \"@liveblocks/core\";\nimport {\n  combineTransactionSteps,\n  type Content,\n  Extension,\n  getChangedRanges,\n} from \"@tiptap/core\";\nimport type { Node as ProseMirrorNode } from \"@tiptap/pm/model\";\nimport { Slice } from \"@tiptap/pm/model\";\nimport { Plugin } from \"@tiptap/pm/state\";\nimport { ReactRenderer } from \"@tiptap/react\";\nimport Suggestion from \"@tiptap/suggestion\";\nimport { ySyncPluginKey } from \"y-prosemirror\";\n\nimport {\n  LIVEBLOCKS_GROUP_MENTION_TYPE,\n  LIVEBLOCKS_MENTION_EXTENSION,\n  LIVEBLOCKS_MENTION_KEY,\n  LIVEBLOCKS_MENTION_NOTIFIER_KEY,\n  LIVEBLOCKS_MENTION_PASTE_KEY,\n  LIVEBLOCKS_MENTION_TYPE,\n  type TiptapMentionData,\n} from \"../types\";\nimport { getMentionsFromNode, mapFragment } from \"../utils\";\nimport { GroupMentionNode } from \"./GroupMentionNode\";\nimport { MentionNode } from \"./MentionNode\";\nimport type { MentionsListHandle, MentionsListProps } from \"./MentionsList\";\nimport { MentionsList } from \"./MentionsList\";\n\n/**\n *\n * Handles creating new notificationIds when notifications are pasted\n *\n * @returns Plugin\n */\nconst mentionPasteHandler = (): Plugin => {\n  return new Plugin({\n    key: LIVEBLOCKS_MENTION_PASTE_KEY,\n    props: {\n      transformPasted: (slice) => {\n        const getNewNotificationIds = (node: ProseMirrorNode) => {\n          // If this is a mention node, we need to get a new notification id\n          if (\n            node.type.name === LIVEBLOCKS_MENTION_TYPE ||\n            node.type.name === LIVEBLOCKS_GROUP_MENTION_TYPE\n          ) {\n            return node.type.create(\n              { ...node.attrs, notificationId: createInboxNotificationId() },\n              node.content\n            );\n          }\n          return node.copy(node.content);\n        };\n        const fragment = mapFragment(slice.content, getNewNotificationIds);\n        return new Slice(fragment, slice.openStart, slice.openEnd);\n      },\n    },\n  });\n};\n\nexport type MentionExtensionOptions = {\n  onCreateMention: (mention: TiptapMentionData) => void;\n  onDeleteMention: (notificationId: string) => void;\n};\n/**\n *\n * The purpose of this plugin is to create inbox notifications when a mention is\n *\n * @returns Plugin (from @tiptap/core)\n */\nconst notifier = ({\n  onCreateMention,\n  onDeleteMention,\n}: MentionExtensionOptions): Plugin => {\n  return new Plugin({\n    key: LIVEBLOCKS_MENTION_NOTIFIER_KEY,\n    appendTransaction: (transactions, oldState, newState) => {\n      const docChanges =\n        transactions.some((transaction) => transaction.docChanged) &&\n        !oldState.doc.eq(newState.doc);\n      // don't run if there was no change\n      if (!docChanges) {\n        return;\n      }\n      // don't run if from collab\n      if (\n        transactions.some((transaction) => transaction.getMeta(ySyncPluginKey))\n      ) {\n        return;\n      }\n      const transform = combineTransactionSteps(oldState.doc, [\n        ...transactions,\n      ]);\n      const changes = getChangedRanges(transform);\n\n      changes.forEach(({ newRange, oldRange }) => {\n        const newMentions = getMentionsFromNode(newState.doc, newRange);\n        const oldMentions = getMentionsFromNode(oldState.doc, oldRange);\n\n        if (oldMentions.size || newMentions.size) {\n          // create new mentions\n          newMentions.forEach((mention) => {\n            if (!oldMentions.has(mention.notificationId)) {\n              onCreateMention(mention);\n            }\n          });\n          // delete old mentions\n          oldMentions.forEach((mention) => {\n            if (!newMentions.has(mention.notificationId)) {\n              onDeleteMention(mention.notificationId);\n            }\n          });\n        }\n      });\n\n      return undefined;\n    },\n  });\n};\n\nexport const MentionExtension = Extension.create<MentionExtensionOptions>({\n  name: LIVEBLOCKS_MENTION_EXTENSION,\n\n  priority: 101,\n  addOptions() {\n    return {\n      onCreateMention: () => {},\n      onDeleteMention: () => {},\n    };\n  },\n\n  addExtensions() {\n    return [MentionNode, GroupMentionNode];\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      Suggestion({\n        editor: this.editor,\n        char: MENTION_CHARACTER,\n        pluginKey: LIVEBLOCKS_MENTION_KEY,\n        command: ({ editor, range, props }) => {\n          // increase range.to by one when the next node is of type \"text\"\n          // and starts with a space character\n          const nodeAfter = editor.view.state.selection.$to.nodeAfter;\n          const overrideSpace = nodeAfter?.text?.startsWith(\" \");\n\n          if (overrideSpace) {\n            range.to += 1;\n          }\n\n          const mention = props as TiptapMentionData;\n\n          let mentionNode: Content;\n\n          if (mention.kind === \"user\") {\n            mentionNode = {\n              type: LIVEBLOCKS_MENTION_TYPE,\n              attrs: {\n                id: mention.id,\n                notificationId: mention.notificationId,\n              },\n            };\n          } else if (mention.kind === \"group\") {\n            mentionNode = {\n              type: LIVEBLOCKS_GROUP_MENTION_TYPE,\n              attrs: {\n                id: mention.id,\n                userIds: mention.userIds\n                  ? JSON.stringify(mention.userIds)\n                  : undefined,\n                notificationId: mention.notificationId,\n              },\n            };\n          } else {\n            assertNever(mention, \"Unhandled mention kind\");\n          }\n\n          editor\n            .chain()\n            .focus()\n            .insertContentAt(range, [\n              mentionNode,\n              {\n                type: \"text\",\n                text: \" \",\n              },\n            ])\n            .run();\n\n          // get reference to `window` object from editor element, to support cross-frame JS usage\n          editor.view.dom.ownerDocument.defaultView\n            ?.getSelection()\n            ?.collapseToEnd();\n        },\n        allow: ({ state, range }) => {\n          const $fromParentType = state.doc.resolve(range.from).parent.type;\n\n          return Boolean(\n            $fromParentType.contentMatch.matchType(\n              state.schema.nodes[LIVEBLOCKS_MENTION_TYPE]\n            ) ||\n              $fromParentType.contentMatch.matchType(\n                state.schema.nodes[LIVEBLOCKS_GROUP_MENTION_TYPE]\n              )\n          );\n        },\n        allowSpaces: true,\n        items: () => [], // we'll let the mentions list component do this\n        render: () => {\n          let component: ReactRenderer<MentionsListHandle, MentionsListProps>;\n          return {\n            onStart: (props) => {\n              component = new ReactRenderer<\n                MentionsListHandle,\n                MentionsListProps\n              >(MentionsList, {\n                props,\n                editor: props.editor,\n              });\n\n              if (!props.clientRect) {\n                return;\n              }\n\n              document.body.appendChild(component.element);\n            },\n\n            onUpdate(props) {\n              component.updateProps(props);\n            },\n\n            onKeyDown(props) {\n              if (props.event.key === \"Escape\") {\n                component.updateProps({\n                  ...props,\n                  hide: true,\n                });\n                return true;\n              }\n              return component.ref?.onKeyDown(props) ?? false;\n            },\n\n            onExit() {\n              if (document.body.contains(component.element)) {\n                document.body.removeChild(component.element);\n              }\n              component.destroy();\n            },\n          };\n        },\n      }),\n      notifier(this.options),\n      mentionPasteHandler(),\n    ];\n  },\n});\n"],"names":["Plugin","LIVEBLOCKS_MENTION_PASTE_KEY","LIVEBLOCKS_MENTION_TYPE","LIVEBLOCKS_GROUP_MENTION_TYPE","createInboxNotificationId","mapFragment","Slice","LIVEBLOCKS_MENTION_NOTIFIER_KEY","ySyncPluginKey","combineTransactionSteps","getChangedRanges","getMentionsFromNode","Extension","LIVEBLOCKS_MENTION_EXTENSION","MentionNode","GroupMentionNode","MENTION_CHARACTER","LIVEBLOCKS_MENTION_KEY","assertNever","ReactRenderer","MentionsList"],"mappings":"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"}