import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useFloating, flip, offset, hide, shift, limitShift, size, autoUpdate } from '@floating-ui/react-dom';
import { createInboxNotificationId, assertNever } from '@liveblocks/core';
import { useRoom } from '@liveblocks/react';
import { useMentionSuggestions, useLayoutEffect } from '@liveblocks/react/_private';
import { Avatar, User, UsersIcon, Group, GroupDescription } from '@liveblocks/react-ui/_private';
import { forwardRef, useState, useEffect, useImperativeHandle } from 'react';

const SUGGESTIONS_COLLISION_PADDING = 10;
const MentionsList = forwardRef(
  (props, ref) => {
    const [selectedIndex, setSelectedIndex] = useState(0);
    const room = useRoom();
    const suggestions = useMentionSuggestions(room.id, props.query);
    const { onMouseEnter, onClick } = props;
    const {
      refs: { setReference, setFloating },
      strategy,
      x,
      y
    } = useFloating({
      strategy: "fixed",
      placement: "top-start",
      middleware: [
        flip({ padding: SUGGESTIONS_COLLISION_PADDING, crossAxis: false }),
        offset(10),
        hide({ padding: SUGGESTIONS_COLLISION_PADDING }),
        shift({
          padding: SUGGESTIONS_COLLISION_PADDING,
          limiter: limitShift()
        }),
        size({ padding: SUGGESTIONS_COLLISION_PADDING })
      ],
      whileElementsMounted: (...args) => {
        return autoUpdate(...args, {
          animationFrame: true
        });
      }
    });
    useLayoutEffect(() => {
      setReference({
        getBoundingClientRect: props.clientRect
      });
    }, [setReference, props.clientRect]);
    const selectItem = (index) => {
      const mention = (suggestions ?? [])[index];
      if (!mention) {
        return;
      }
      const notificationId = createInboxNotificationId();
      switch (mention.kind) {
        case "user":
          props.command({
            kind: "user",
            id: mention.id,
            notificationId
          });
          break;
        case "group":
          props.command({
            kind: "group",
            id: mention.id,
            userIds: mention.userIds,
            notificationId
          });
          break;
        default:
          return assertNever(mention, "Unhandled mention kind");
      }
    };
    const upHandler = () => {
      setSelectedIndex(
        (selectedIndex + (suggestions?.length ?? 0) - 1) % (suggestions?.length ?? 0)
      );
    };
    const downHandler = () => {
      setSelectedIndex((selectedIndex + 1) % (suggestions?.length ?? 0));
    };
    const enterHandler = () => {
      selectItem(selectedIndex);
    };
    useEffect(() => setSelectedIndex(0), [suggestions]);
    useImperativeHandle(ref, () => ({
      onKeyDown: ({ event }) => {
        if (event.key === "ArrowUp") {
          upHandler();
          return true;
        }
        if (event.key === "ArrowDown") {
          downHandler();
          return true;
        }
        if (event.key === "Enter") {
          enterHandler();
          return true;
        }
        return false;
      }
    }));
    const handleClick = (index) => (event) => {
      onClick?.(event);
      if (event.isDefaultPrevented())
        return;
      selectItem(index);
    };
    const handleMouseEnter = (index) => (event) => {
      onMouseEnter?.(event);
      if (event.isDefaultPrevented())
        return;
      setSelectedIndex(index);
    };
    if (suggestions === void 0 || suggestions.length === 0) {
      return null;
    }
    return /* @__PURE__ */ jsx("div", {
      className: "lb-root lb-portal lb-elevation lb-tiptap-suggestions lb-tiptap-mention-suggestions",
      ref: setFloating,
      style: {
        position: strategy,
        top: 0,
        left: 0,
        transform: `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`,
        minWidth: "max-content",
        display: props.hide ? "none" : "block"
      },
      children: /* @__PURE__ */ jsx("div", {
        className: "lb-tiptap-suggestions-list lb-tiptap-mention-suggestions-list",
        children: suggestions.map((mention, index) => {
          return /* @__PURE__ */ jsx("div", {
            className: "lb-tiptap-suggestions-list-item lb-tiptap-mention-suggestion",
            role: "option",
            "data-highlighted": index === selectedIndex || void 0,
            onMouseEnter: handleMouseEnter(index),
            onClick: handleClick(index),
            children: mention.kind === "user" ? /* @__PURE__ */ jsxs(Fragment, {
              children: [
                /* @__PURE__ */ jsx(Avatar, {
                  userId: mention.id,
                  className: "lb-tiptap-mention-suggestion-avatar"
                }),
                /* @__PURE__ */ jsx(User, {
                  userId: mention.id,
                  className: "lb-tiptap-mention-suggestion-user"
                })
              ]
            }) : mention.kind === "group" ? /* @__PURE__ */ jsxs(Fragment, {
              children: [
                /* @__PURE__ */ jsx(Avatar, {
                  groupId: mention.id,
                  className: "lb-tiptap-mention-suggestion-avatar",
                  icon: /* @__PURE__ */ jsx(UsersIcon, {})
                }),
                /* @__PURE__ */ jsx(Group, {
                  groupId: mention.id,
                  className: "lb-tiptap-mention-suggestion-group",
                  children: /* @__PURE__ */ jsx(GroupDescription, {
                    groupId: mention.id,
                    className: "lb-tiptap-mention-suggestion-group-description"
                  })
                })
              ]
            }) : assertNever(mention, "Unhandled mention kind")
          }, index);
        })
      })
    });
  }
);

export { MentionsList, SUGGESTIONS_COLLISION_PADDING };
//# sourceMappingURL=MentionsList.js.map
