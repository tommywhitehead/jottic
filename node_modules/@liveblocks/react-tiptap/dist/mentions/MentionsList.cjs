'use strict';

var jsxRuntime = require('react/jsx-runtime');
var reactDom = require('@floating-ui/react-dom');
var core = require('@liveblocks/core');
var react$1 = require('@liveblocks/react');
var _private = require('@liveblocks/react/_private');
var _private$1 = require('@liveblocks/react-ui/_private');
var react = require('react');

const SUGGESTIONS_COLLISION_PADDING = 10;
const MentionsList = react.forwardRef(
  (props, ref) => {
    const [selectedIndex, setSelectedIndex] = react.useState(0);
    const room = react$1.useRoom();
    const suggestions = _private.useMentionSuggestions(room.id, props.query);
    const { onMouseEnter, onClick } = props;
    const {
      refs: { setReference, setFloating },
      strategy,
      x,
      y
    } = reactDom.useFloating({
      strategy: "fixed",
      placement: "top-start",
      middleware: [
        reactDom.flip({ padding: SUGGESTIONS_COLLISION_PADDING, crossAxis: false }),
        reactDom.offset(10),
        reactDom.hide({ padding: SUGGESTIONS_COLLISION_PADDING }),
        reactDom.shift({
          padding: SUGGESTIONS_COLLISION_PADDING,
          limiter: reactDom.limitShift()
        }),
        reactDom.size({ padding: SUGGESTIONS_COLLISION_PADDING })
      ],
      whileElementsMounted: (...args) => {
        return reactDom.autoUpdate(...args, {
          animationFrame: true
        });
      }
    });
    _private.useLayoutEffect(() => {
      setReference({
        getBoundingClientRect: props.clientRect
      });
    }, [setReference, props.clientRect]);
    const selectItem = (index) => {
      const mention = (suggestions ?? [])[index];
      if (!mention) {
        return;
      }
      const notificationId = core.createInboxNotificationId();
      switch (mention.kind) {
        case "user":
          props.command({
            kind: "user",
            id: mention.id,
            notificationId
          });
          break;
        case "group":
          props.command({
            kind: "group",
            id: mention.id,
            userIds: mention.userIds,
            notificationId
          });
          break;
        default:
          return core.assertNever(mention, "Unhandled mention kind");
      }
    };
    const upHandler = () => {
      setSelectedIndex(
        (selectedIndex + (suggestions?.length ?? 0) - 1) % (suggestions?.length ?? 0)
      );
    };
    const downHandler = () => {
      setSelectedIndex((selectedIndex + 1) % (suggestions?.length ?? 0));
    };
    const enterHandler = () => {
      selectItem(selectedIndex);
    };
    react.useEffect(() => setSelectedIndex(0), [suggestions]);
    react.useImperativeHandle(ref, () => ({
      onKeyDown: ({ event }) => {
        if (event.key === "ArrowUp") {
          upHandler();
          return true;
        }
        if (event.key === "ArrowDown") {
          downHandler();
          return true;
        }
        if (event.key === "Enter") {
          enterHandler();
          return true;
        }
        return false;
      }
    }));
    const handleClick = (index) => (event) => {
      onClick?.(event);
      if (event.isDefaultPrevented())
        return;
      selectItem(index);
    };
    const handleMouseEnter = (index) => (event) => {
      onMouseEnter?.(event);
      if (event.isDefaultPrevented())
        return;
      setSelectedIndex(index);
    };
    if (suggestions === void 0 || suggestions.length === 0) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntime.jsx("div", {
      className: "lb-root lb-portal lb-elevation lb-tiptap-suggestions lb-tiptap-mention-suggestions",
      ref: setFloating,
      style: {
        position: strategy,
        top: 0,
        left: 0,
        transform: `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`,
        minWidth: "max-content",
        display: props.hide ? "none" : "block"
      },
      children: /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: "lb-tiptap-suggestions-list lb-tiptap-mention-suggestions-list",
        children: suggestions.map((mention, index) => {
          return /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: "lb-tiptap-suggestions-list-item lb-tiptap-mention-suggestion",
            role: "option",
            "data-highlighted": index === selectedIndex || void 0,
            onMouseEnter: handleMouseEnter(index),
            onClick: handleClick(index),
            children: mention.kind === "user" ? /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(_private$1.Avatar, {
                  userId: mention.id,
                  className: "lb-tiptap-mention-suggestion-avatar"
                }),
                /* @__PURE__ */ jsxRuntime.jsx(_private$1.User, {
                  userId: mention.id,
                  className: "lb-tiptap-mention-suggestion-user"
                })
              ]
            }) : mention.kind === "group" ? /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
              children: [
                /* @__PURE__ */ jsxRuntime.jsx(_private$1.Avatar, {
                  groupId: mention.id,
                  className: "lb-tiptap-mention-suggestion-avatar",
                  icon: /* @__PURE__ */ jsxRuntime.jsx(_private$1.UsersIcon, {})
                }),
                /* @__PURE__ */ jsxRuntime.jsx(_private$1.Group, {
                  groupId: mention.id,
                  className: "lb-tiptap-mention-suggestion-group",
                  children: /* @__PURE__ */ jsxRuntime.jsx(_private$1.GroupDescription, {
                    groupId: mention.id,
                    className: "lb-tiptap-mention-suggestion-group-description"
                  })
                })
              ]
            }) : core.assertNever(mention, "Unhandled mention kind")
          }, index);
        })
      })
    });
  }
);

exports.MentionsList = MentionsList;
exports.SUGGESTIONS_COLLISION_PADDING = SUGGESTIONS_COLLISION_PADDING;
//# sourceMappingURL=MentionsList.cjs.map
