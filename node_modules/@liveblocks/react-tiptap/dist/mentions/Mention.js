import { jsxs, jsx } from 'react/jsx-runtime';
import { MENTION_CHARACTER } from '@liveblocks/core';
import { cn, User, Group } from '@liveblocks/react-ui/_private';
import { NodeViewWrapper } from '@tiptap/react';
import { forwardRef } from 'react';
import { LIVEBLOCKS_MENTION_TYPE, LIVEBLOCKS_GROUP_MENTION_TYPE } from '../types.js';

const UserMention = forwardRef(
  ({ mention, isSelected }, forwardedRef) => {
    return /* @__PURE__ */ jsxs(NodeViewWrapper, {
      className: cn(
        "lb-root lb-mention lb-tiptap-mention",
        isSelected && "lb-mention-selected"
      ),
      as: "span",
      ref: forwardedRef,
      children: [
        /* @__PURE__ */ jsx("span", {
          className: "lb-mention-symbol",
          children: MENTION_CHARACTER
        }),
        /* @__PURE__ */ jsx(User, {
          userId: mention.id
        })
      ]
    });
  }
);
const GroupMention = forwardRef(
  ({ mention, isSelected }, forwardedRef) => {
    return /* @__PURE__ */ jsxs(NodeViewWrapper, {
      className: cn(
        "lb-root lb-mention lb-tiptap-mention",
        isSelected && "lb-mention-selected"
      ),
      as: "span",
      ref: forwardedRef,
      children: [
        /* @__PURE__ */ jsx("span", {
          className: "lb-mention-symbol",
          children: MENTION_CHARACTER
        }),
        /* @__PURE__ */ jsx(Group, {
          groupId: mention.id
        })
      ]
    });
  }
);
function deserializeGroupUserIds(userIds) {
  if (typeof userIds !== "string") {
    return void 0;
  }
  try {
    const parsedUserIds = JSON.parse(userIds);
    if (Array.isArray(parsedUserIds)) {
      return parsedUserIds;
    }
    return void 0;
  } catch {
    return void 0;
  }
}
const Mention = forwardRef(({ node, selected: isSelected }, forwardedRef) => {
  const attrs = node.attrs;
  if (node.type.name === LIVEBLOCKS_MENTION_TYPE) {
    const mention = {
      kind: "user",
      id: attrs.id
    };
    return /* @__PURE__ */ jsx(UserMention, {
      mention,
      isSelected,
      ref: forwardedRef
    });
  }
  if (node.type.name === LIVEBLOCKS_GROUP_MENTION_TYPE) {
    const mention = {
      kind: "group",
      id: attrs.id,
      userIds: deserializeGroupUserIds(attrs.userIds)
    };
    return /* @__PURE__ */ jsx(GroupMention, {
      mention,
      isSelected,
      ref: forwardedRef
    });
  }
  return null;
});

export { Mention };
//# sourceMappingURL=Mention.js.map
