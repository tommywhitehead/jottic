{"version":3,"file":"AiExtension.cjs","sources":["../../src/ai/AiExtension.ts"],"sourcesContent":["import {\n  autoRetry,\n  type ContextualPromptResponse,\n  HttpError,\n} from \"@liveblocks/core\";\nimport type { LiveblocksYjsProvider } from \"@liveblocks/yjs\";\nimport type { CommandProps, Editor } from \"@tiptap/core\";\nimport { Extension } from \"@tiptap/core\";\nimport { Fragment, Slice } from \"@tiptap/pm/model\";\nimport type { Transaction } from \"@tiptap/pm/state\";\nimport { Plugin } from \"@tiptap/pm/state\";\nimport { Decoration, DecorationSet } from \"@tiptap/pm/view\";\nimport {\n  ySyncPluginKey,\n  yXmlFragmentToProseMirrorFragment,\n} from \"y-prosemirror\";\nimport type { Doc, Snapshot } from \"yjs\";\nimport {\n  createDocFromSnapshot,\n  emptySnapshot,\n  equalSnapshots,\n  snapshot as takeSnapshot,\n} from \"yjs\";\n\nimport {\n  AI_TOOLBAR_SELECTION_PLUGIN,\n  type AiCommands,\n  type AiExtensionOptions,\n  type AiExtensionStorage,\n  type AiToolbarState,\n  type LiveblocksExtensionStorage,\n  type ResolveContextualPromptResponse,\n  type YSyncPluginState,\n} from \"../types\";\nimport { getContextualPromptContext } from \"../utils\";\n\nconst DEFAULT_AI_NAME = \"AI\";\nexport const DEFAULT_STATE: AiToolbarState = { phase: \"closed\" };\n\nconst RESOLVE_AI_PROMPT_RETRY_ATTEMPTS = 3;\nconst RESOLVE_AI_PROMPT_RETRY_DELAYS = [1000, 2000, 4000];\n\nfunction getYjsBinding(editor: Editor) {\n  return (ySyncPluginKey.getState(editor.view.state) as YSyncPluginState)\n    .binding;\n}\n\nfunction getLiveblocksYjsProvider(editor: Editor) {\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return (\n    editor.extensionStorage.liveblocksExtension as\n      | LiveblocksExtensionStorage\n      | undefined\n  )?.provider as LiveblocksYjsProvider | undefined;\n}\n\nexport function isContextualPromptDiffResponse(\n  response: ContextualPromptResponse\n): response is Extract<\n  ContextualPromptResponse,\n  { type: \"replace\" | \"insert\" }\n> {\n  return response.type === \"replace\" || response.type === \"insert\";\n}\n\nfunction isResolveContextualPromptResponse(\n  response: unknown\n): response is ResolveContextualPromptResponse {\n  return (\n    typeof response === \"object\" &&\n    response !== null &&\n    typeof (response as { text: unknown }).text === \"string\" &&\n    typeof (response as { type: unknown }).type === \"string\" &&\n    [\"insert\", \"replace\", \"other\"].includes((response as { type: string }).type)\n  );\n}\n\nfunction createParagraph(editor: Editor, text: string) {\n  const paragraph =\n    editor.schema.nodes.paragraph ??\n    Object.values(editor.schema.nodes).find((node) => node.isBlock);\n\n  if (!paragraph) {\n    throw new Error(\"Could not create a paragraph.\");\n  }\n\n  return paragraph.create(null, text ? editor.schema.text(text) : undefined);\n}\n\nfunction getRevertTransaction(\n  tr: Transaction,\n  editor: Editor,\n  storage: AiExtensionStorage,\n  doc?: Doc\n): Transaction | null {\n  if (storage.snapshot) {\n    const binding = getYjsBinding(editor);\n\n    if (binding) {\n      binding.mapping.clear();\n\n      const docFromSnapshot = createDocFromSnapshot(\n        binding.doc,\n        storage.snapshot\n      );\n      const type = docFromSnapshot.getXmlFragment(\"default\"); // TODO: field\n      const fragmentContent = yXmlFragmentToProseMirrorFragment(\n        type,\n        editor.state.schema\n      );\n\n      tr.setMeta(\"addToHistory\", false);\n      tr.replace(\n        0,\n        editor.state.doc.content.size,\n        new Slice(Fragment.from(fragmentContent), 0, 0)\n      );\n      tr.setMeta(ySyncPluginKey, {\n        snapshot: null,\n        prevSnapshot: null,\n      });\n\n      if (doc) {\n        doc.gc = true;\n      }\n\n      storage.snapshot = undefined;\n\n      return tr;\n    }\n  }\n  return null;\n}\n\nexport const AiExtension = Extension.create<\n  AiExtensionOptions,\n  AiExtensionStorage\n>({\n  name: \"liveblocksAi\",\n  addOptions() {\n    return {\n      doc: undefined,\n      pud: undefined,\n\n      // The actual default resolver is set in LiveblocksExtension via AiExtension.configure()\n      resolveContextualPrompt: () => Promise.reject(),\n      name: DEFAULT_AI_NAME,\n    };\n  },\n  addStorage() {\n    return {\n      state: DEFAULT_STATE,\n      name: this.options.name,\n    };\n  },\n  addCommands() {\n    return {\n      askAi: (prompt) => () => {\n        if (typeof prompt === \"string\") {\n          (\n            this.editor.commands as unknown as AiCommands\n          ).$startAiToolbarThinking(prompt);\n        } else {\n          (\n            this.editor.commands as unknown as AiCommands\n          ).$openAiToolbarAsking();\n        }\n\n        return true;\n      },\n\n      closeAi: () => () => {\n        (this.editor.commands as unknown as AiCommands).$closeAiToolbar();\n\n        return true;\n      },\n\n      $acceptAiToolbarResponse:\n        () =>\n        ({ tr, view }: CommandProps) => {\n          const currentState = this.storage.state;\n\n          // 1. If NOT in \"reviewing\" phase, do nothing\n          if (currentState.phase !== \"reviewing\") {\n            return false;\n          }\n\n          // 2. Accept the response\n          if (isContextualPromptDiffResponse(currentState.response)) {\n            // 2.a. If the response is a diff, apply it definitely\n            const binding = getYjsBinding(this.editor);\n            if (!binding) {\n              return false;\n            }\n\n            const fragmentContent = yXmlFragmentToProseMirrorFragment(\n              binding.type,\n              this.editor.state.schema\n            );\n            tr.setMeta(\"addToHistory\", false);\n            tr.replace(\n              0,\n              this.editor.state.doc.content.size,\n              new Slice(Fragment.from(fragmentContent), 0, 0)\n            );\n            tr.setMeta(ySyncPluginKey, {\n              snapshot: null,\n              prevSnapshot: null,\n            });\n\n            this.storage.snapshot = undefined;\n          } else {\n            // 2.b. If the response is not a diff, insert it below the selection\n\n            const paragraphs = currentState.response.text\n              .split(\"\\n\")\n              .map((paragraph) => createParagraph(this.editor, paragraph));\n\n            tr.insert(this.editor.state.selection.$to.end(), paragraphs);\n            tr.setMeta(\"addToHistory\", true);\n            view.dispatch(tr);\n            // Prevent TipTap from dispatching this transaction, because we already did (this is a hack)\n            tr.setMeta(\"preventDispatch\", true);\n          }\n\n          // 3. Unblock the editor\n          getLiveblocksYjsProvider(this.editor)?.unpause();\n          this.editor.setEditable(true);\n\n          // 4. Set to \"closed\" phase\n          this.storage.state = { phase: \"closed\" };\n\n          return true;\n        },\n\n      $closeAiToolbar:\n        () =>\n        ({ tr, view }: CommandProps) => {\n          const currentState = this.storage.state;\n\n          // 1. If already in \"closed\" phase, do nothing\n          if (currentState.phase === \"closed\") {\n            return false;\n          }\n\n          // 2. If in \"thinking\" phase, cancel the current AI request\n          if (currentState.phase === \"thinking\") {\n            currentState.abortController.abort();\n          }\n\n          // 3. If in \"thinking\" or \"reviewing\" phase, revert the editor if possible and unblock it\n          if (\n            currentState.phase === \"thinking\" ||\n            currentState.phase === \"reviewing\"\n          ) {\n            // Get the revert transaction and dispatch it\n            const revertTr = getRevertTransaction(\n              tr,\n              this.editor,\n              this.storage,\n              this.options.doc\n            );\n            if (revertTr) {\n              view.dispatch(revertTr);\n              // Prevent TipTap from dispatching this transaction, because we already did (this is a hack)\n              tr.setMeta(\"preventDispatch\", true);\n            }\n          }\n\n          // 4. Restore the initial selection\n          this.editor.commands.setTextSelection(currentState.initialSelection);\n\n          // 5. Unblock the editor\n          getLiveblocksYjsProvider(this.editor)?.unpause();\n          this.editor.setEditable(true);\n\n          // 6. Set to \"closed\" phase\n          this.storage.state = { phase: \"closed\" };\n\n          return true;\n        },\n\n      $openAiToolbarAsking: () => () => {\n        const currentState = this.storage.state;\n\n        // 1. If NOT in \"closed\" phase, do nothing\n        if (currentState.phase !== \"closed\") {\n          return false;\n        }\n\n        // 2. Blur the editor if needed\n        if (this.editor.isFocused) {\n          this.editor.commands.blur();\n        }\n\n        // 3. Set to \"asking\" phase\n        this.storage.state = {\n          phase: \"asking\",\n          // Store the initial selection\n          initialSelection: {\n            from: this.editor.state.selection.from,\n            to: this.editor.state.selection.to,\n          },\n          // Initialize the custom prompt as empty\n          customPrompt: \"\",\n        };\n\n        return true;\n      },\n\n      $startAiToolbarThinking:\n        (prompt: string, withPreviousResponse?: boolean) =>\n        ({ tr, view }: CommandProps) => {\n          const currentState = this.storage.state;\n\n          // 1. If in \"thinking\" phase already, do nothing\n          if (currentState.phase === \"thinking\") {\n            return false;\n          }\n\n          // 2. Blur the editor if needed\n          if (this.editor.isFocused) {\n            this.editor.commands.blur();\n          }\n\n          const abortController = new AbortController();\n          const provider = getLiveblocksYjsProvider(this.editor);\n\n          // 3. If this is a retry or a refinement, revert the editor and restore the initial selection\n          if (currentState.phase === \"reviewing\") {\n            // 3.a. Revert the editor\n            const revertTr = getRevertTransaction(\n              tr,\n              this.editor,\n              this.storage,\n              this.options.doc\n            );\n            if (revertTr) {\n              // Important: in this scenario we do not unpause the provider\n              view.dispatch(revertTr);\n              // Prevent Tiptap from dispatching this transaction, because we already did (this is a hack)\n              tr.setMeta(\"preventDispatch\", true);\n            }\n\n            // 3.b. Restore the initial selection\n            this.editor.commands.setTextSelection(\n              currentState.initialSelection\n            );\n          }\n\n          // 4. Set to \"thinking\" phase\n          this.storage.state = {\n            phase: \"thinking\",\n            // Store the initial selection if the toolbar is opened directly in the \"thinking\" phase\n            initialSelection: currentState.initialSelection ?? {\n              from: this.editor.state.selection.from,\n              to: this.editor.state.selection.to,\n            },\n            // Initialize the custom prompt as empty if the toolbar is opened directly in the \"thinking\" phase\n            customPrompt: currentState.customPrompt ?? \"\",\n            prompt,\n            abortController,\n            previousResponse: currentState.response,\n          };\n\n          // 5. Block the editor\n          this.editor.setEditable(false);\n\n          // 6. Start the AI request\n          autoRetry(\n            async () => {\n              await provider?.pause();\n\n              // 6.a. Resolve the AI prompt\n              const response = (await this.options.resolveContextualPrompt({\n                prompt,\n                context: getContextualPromptContext(this.editor, 3_000),\n                signal: abortController.signal,\n                previous:\n                  withPreviousResponse && currentState.phase === \"reviewing\"\n                    ? {\n                        prompt: currentState.prompt,\n                        response: {\n                          type: currentState.response?.type,\n                          text: currentState.response?.text,\n                        },\n                      }\n                    : undefined,\n              })) as unknown;\n\n              // 6.b. Validate the response\n              if (isResolveContextualPromptResponse(response)) {\n                return response;\n              } else {\n                throw new Error(\"Failed to resolve AI prompt.\");\n              }\n            },\n            RESOLVE_AI_PROMPT_RETRY_ATTEMPTS,\n            RESOLVE_AI_PROMPT_RETRY_DELAYS,\n\n            (error) => {\n              // Don't retry on 4xx errors or if the request was aborted\n              return (\n                abortController.signal.aborted ||\n                (error instanceof HttpError &&\n                  error.status >= 400 &&\n                  error.status < 500)\n              );\n            }\n          )\n            .then((response) => {\n              if (abortController.signal.aborted) {\n                return;\n              }\n\n              // 6.a. If the AI request succeeds, set to \"reviewing\" phase with the response\n              (\n                this.editor.commands as unknown as AiCommands\n              )._handleAiToolbarThinkingSuccess({\n                type: response.type,\n                text: response.text,\n              });\n            })\n            .catch((error) => {\n              if (abortController.signal.aborted) {\n                return;\n              }\n\n              // 6.b. If the AI request fails, set to \"asking\" phase with error\n              (\n                this.editor.commands as unknown as AiCommands\n              )._handleAiToolbarThinkingError(error);\n            });\n\n          return true;\n        },\n\n      $cancelAiToolbarThinking: () => () => {\n        const currentState = this.storage.state;\n\n        // 1. If NOT in \"thinking\" phase, do nothing\n        if (currentState.phase !== \"thinking\") {\n          return false;\n        }\n\n        // 2. Cancel the current AI request\n        currentState.abortController.abort();\n\n        // 3. Unblock the editor\n        this.editor.setEditable(true);\n\n        // 4. Set to \"asking\" phase\n        this.storage.state = {\n          phase: \"asking\",\n          initialSelection: currentState.initialSelection,\n          // If the custom prompt is different than the prompt, reset it\n          customPrompt:\n            currentState.prompt === currentState.customPrompt\n              ? currentState.customPrompt\n              : \"\",\n        };\n\n        return true;\n      },\n\n      _showAiToolbarReviewingDiff: () => () => {\n        // The diff is applied right before moving to the \"reviewing\" phase\n        if (this.storage.state.phase !== \"reviewing\") {\n          return false;\n        }\n\n        if (!this.options.doc || !this.storage.snapshot) {\n          return false;\n        }\n\n        const previousSnapshot: Snapshot =\n          this.storage.snapshot ?? emptySnapshot;\n        const currentSnapshot = takeSnapshot(this.options.doc);\n\n        if (equalSnapshots(previousSnapshot, currentSnapshot)) {\n          return true;\n        }\n\n        getYjsBinding(this.editor)?.renderSnapshot(\n          currentSnapshot,\n          previousSnapshot\n        );\n\n        return true;\n      },\n\n      _handleAiToolbarThinkingSuccess:\n        (response: ContextualPromptResponse) =>\n        ({ view, tr }: CommandProps) => {\n          const currentState = this.storage.state;\n\n          // 1. If NOT in \"thinking\" phase, do nothing\n          if (currentState.phase !== \"thinking\") {\n            return false;\n          }\n\n          // 2. If this is not a diff, the response will just be in the toolbar, set to \"reviewing\" phase directly with the response\n          if (!isContextualPromptDiffResponse(response)) {\n            this.storage.state = {\n              phase: \"reviewing\",\n              initialSelection: currentState.initialSelection,\n              customPrompt: \"\",\n              prompt: currentState.prompt,\n              response,\n            };\n\n            return true;\n          }\n\n          if (!this.options.doc) {\n            return false;\n          }\n\n          // 3. Otherwise, the response is a diff, apply it to the editor\n          this.options.doc.gc = false;\n          this.storage.snapshot = takeSnapshot(this.options.doc);\n\n          // 4. Set to \"reviewing\" phase with the new range\n          this.storage.state = {\n            phase: \"reviewing\",\n            initialSelection: currentState.initialSelection,\n            customPrompt: \"\",\n            prompt: currentState.prompt,\n            response,\n          };\n\n          // 5. Insert the response's text as inline first (and replace the selection if it's a replace) then as block if there are multiple paragraphs\n          const [firstParagraph, ...otherParagraphs] =\n            response.text.split(\"\\n\");\n\n          tr.insertText(\n            firstParagraph,\n            response.type === \"insert\"\n              ? this.editor.state.selection.to\n              : this.editor.state.selection.from,\n            this.editor.state.selection.to\n          );\n\n          if (otherParagraphs.length > 0) {\n            const paragraphs = otherParagraphs.map((paragraph) =>\n              createParagraph(this.editor, paragraph)\n            );\n\n            tr.insert(tr.selection.$to.pos, paragraphs);\n          }\n\n          view.dispatch(tr);\n          // Prevent Tiptap from dispatching this transaction, because we already did (this is a hack)\n          tr.setMeta(\"preventDispatch\", true);\n\n          // 6. Show the diff\n          (\n            this.editor.commands as unknown as AiCommands\n          )._showAiToolbarReviewingDiff();\n\n          // We moved to the \"reviewing\" phase, so even if `_showAiToolbarReviewingDiff`\n          // returns `false` somehow, we still want to return `true`\n          return true;\n        },\n\n      _handleAiToolbarThinkingError: (error: unknown) => () => {\n        const currentState = this.storage.state;\n\n        // 1. If NOT in \"thinking\" phase, do nothing\n        if (currentState.phase !== \"thinking\") {\n          return false;\n        }\n\n        // 2. Unblock the editor\n        this.editor.setEditable(true);\n\n        // 3. Log the error\n        console.error(error);\n\n        // 4. Set to \"asking\" phase with error\n        this.storage.state = {\n          phase: \"asking\",\n          initialSelection: currentState.initialSelection,\n          // If the custom prompt is different than the prompt, reset it\n          customPrompt:\n            currentState.prompt === currentState.customPrompt\n              ? currentState.customPrompt\n              : \"\",\n          // Pass the error so it can be displayed\n          error:\n            error instanceof Error\n              ? error\n              : new Error(String(error), { cause: error }),\n        };\n\n        return true;\n      },\n\n      _updateAiToolbarCustomPrompt:\n        (customPrompt: string | ((currentCustomPrompt: string) => string)) =>\n        () => {\n          const currentState = this.storage.state;\n\n          // 1. If NOT in a phase with a custom prompt, do nothing\n          if (typeof currentState.customPrompt !== \"string\") {\n            return false;\n          }\n\n          // 2. Update the custom prompt\n          this.storage.state.customPrompt =\n            typeof customPrompt === \"function\"\n              ? customPrompt(currentState.customPrompt)\n              : customPrompt;\n\n          return true;\n        },\n    };\n  },\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: AI_TOOLBAR_SELECTION_PLUGIN,\n        props: {\n          decorations: ({ doc, selection }) => {\n            // Don't show the AI toolbar selection if the toolbar is closed or when reviewing diff responses\n            if (\n              this.storage.state.phase === \"closed\" ||\n              (this.storage.state.phase === \"reviewing\" &&\n                isContextualPromptDiffResponse(this.storage.state.response))\n            ) {\n              return DecorationSet.create(doc, []);\n            }\n\n            const { from, to } = selection;\n            const decorations: Decoration[] = [\n              Decoration.inline(from, to, {\n                class: \"lb-root lb-selection lb-tiptap-active-selection\",\n              }),\n            ];\n\n            return DecorationSet.create(doc, decorations);\n          },\n        },\n      }),\n    ];\n  },\n});\n"],"names":["ySyncPluginKey","createDocFromSnapshot","yXmlFragmentToProseMirrorFragment","Slice","Fragment","Extension","autoRetry","getContextualPromptContext","HttpError","emptySnapshot","takeSnapshot","equalSnapshots","Plugin","AI_TOOLBAR_SELECTION_PLUGIN","DecorationSet","Decoration"],"mappings":";;;;;;;;;;;;AAoCA,MAAM,eAAkB,GAAA,IAAA,CAAA;AACX,MAAA,aAAA,GAAgC,EAAE,KAAA,EAAO,QAAS,GAAA;AAE/D,MAAM,gCAAmC,GAAA,CAAA,CAAA;AACzC,MAAM,8BAAiC,GAAA,CAAC,GAAM,EAAA,GAAA,EAAM,GAAI,CAAA,CAAA;AAExD,SAAS,cAAc,MAAgB,EAAA;AACrC,EAAA,OAAQA,2BAAe,CAAA,QAAA,CAAS,MAAO,CAAA,IAAA,CAAK,KAAK,CAC9C,CAAA,OAAA,CAAA;AACL,CAAA;AAEA,SAAS,yBAAyB,MAAgB,EAAA;AAEhD,EACE,OAAA,MAAA,CAAO,iBAAiB,mBAGvB,EAAA,QAAA,CAAA;AACL,CAAA;AAEO,SAAS,+BACd,QAIA,EAAA;AACA,EAAA,OAAO,QAAS,CAAA,IAAA,KAAS,SAAa,IAAA,QAAA,CAAS,IAAS,KAAA,QAAA,CAAA;AAC1D,CAAA;AAEA,SAAS,kCACP,QAC6C,EAAA;AAC7C,EACE,OAAA,OAAO,aAAa,QACpB,IAAA,QAAA,KAAa,QACb,OAAQ,QAAA,CAA+B,SAAS,QAChD,IAAA,OAAQ,SAA+B,IAAS,KAAA,QAAA,IAChD,CAAC,QAAU,EAAA,SAAA,EAAW,OAAO,CAAE,CAAA,QAAA,CAAU,SAA8B,IAAI,CAAA,CAAA;AAE/E,CAAA;AAEA,SAAS,eAAA,CAAgB,QAAgB,IAAc,EAAA;AACrD,EAAA,MAAM,SACJ,GAAA,MAAA,CAAO,MAAO,CAAA,KAAA,CAAM,aACpB,MAAO,CAAA,MAAA,CAAO,MAAO,CAAA,MAAA,CAAO,KAAK,CAAE,CAAA,IAAA,CAAK,CAAC,IAAA,KAAS,KAAK,OAAO,CAAA,CAAA;AAEhE,EAAA,IAAI,CAAC,SAAW,EAAA;AACd,IAAM,MAAA,IAAI,MAAM,+BAA+B,CAAA,CAAA;AAAA,GACjD;AAEA,EAAO,OAAA,SAAA,CAAU,OAAO,IAAM,EAAA,IAAA,GAAO,OAAO,MAAO,CAAA,IAAA,CAAK,IAAI,CAAA,GAAI,KAAS,CAAA,CAAA,CAAA;AAC3E,CAAA;AAEA,SAAS,oBACP,CAAA,EAAA,EACA,MACA,EAAA,OAAA,EACA,GACoB,EAAA;AACpB,EAAA,IAAI,QAAQ,QAAU,EAAA;AACpB,IAAM,MAAA,OAAA,GAAU,cAAc,MAAM,CAAA,CAAA;AAEpC,IAAA,IAAI,OAAS,EAAA;AACX,MAAA,OAAA,CAAQ,QAAQ,KAAM,EAAA,CAAA;AAEtB,MAAA,MAAM,eAAkB,GAAAC,yBAAA;AAAA,QACtB,OAAQ,CAAA,GAAA;AAAA,QACR,OAAQ,CAAA,QAAA;AAAA,OACV,CAAA;AACA,MAAM,MAAA,IAAA,GAAO,eAAgB,CAAA,cAAA,CAAe,SAAS,CAAA,CAAA;AACrD,MAAA,MAAM,eAAkB,GAAAC,8CAAA;AAAA,QACtB,IAAA;AAAA,QACA,OAAO,KAAM,CAAA,MAAA;AAAA,OACf,CAAA;AAEA,MAAG,EAAA,CAAA,OAAA,CAAQ,gBAAgB,KAAK,CAAA,CAAA;AAChC,MAAG,EAAA,CAAA,OAAA;AAAA,QACD,CAAA;AAAA,QACA,MAAA,CAAO,KAAM,CAAA,GAAA,CAAI,OAAQ,CAAA,IAAA;AAAA,QACzB,IAAIC,WAAM,CAAAC,cAAA,CAAS,KAAK,eAAe,CAAA,EAAG,GAAG,CAAC,CAAA;AAAA,OAChD,CAAA;AACA,MAAA,EAAA,CAAG,QAAQJ,2BAAgB,EAAA;AAAA,QACzB,QAAU,EAAA,IAAA;AAAA,QACV,YAAc,EAAA,IAAA;AAAA,OACf,CAAA,CAAA;AAED,MAAA,IAAI,GAAK,EAAA;AACP,QAAA,GAAA,CAAI,EAAK,GAAA,IAAA,CAAA;AAAA,OACX;AAEA,MAAA,OAAA,CAAQ,QAAW,GAAA,KAAA,CAAA,CAAA;AAEnB,MAAO,OAAA,EAAA,CAAA;AAAA,KACT;AAAA,GACF;AACA,EAAO,OAAA,IAAA,CAAA;AACT,CAAA;AAEa,MAAA,WAAA,GAAcK,eAAU,MAGnC,CAAA;AAAA,EACA,IAAM,EAAA,cAAA;AAAA,EACN,UAAa,GAAA;AACX,IAAO,OAAA;AAAA,MACL,GAAK,EAAA,KAAA,CAAA;AAAA,MACL,GAAK,EAAA,KAAA,CAAA;AAAA,MAGL,uBAAA,EAAyB,MAAM,OAAA,CAAQ,MAAO,EAAA;AAAA,MAC9C,IAAM,EAAA,eAAA;AAAA,KACR,CAAA;AAAA,GACF;AAAA,EACA,UAAa,GAAA;AACX,IAAO,OAAA;AAAA,MACL,KAAO,EAAA,aAAA;AAAA,MACP,IAAA,EAAM,KAAK,OAAQ,CAAA,IAAA;AAAA,KACrB,CAAA;AAAA,GACF;AAAA,EACA,WAAc,GAAA;AACZ,IAAO,OAAA;AAAA,MACL,KAAA,EAAO,CAAC,MAAA,KAAW,MAAM;AACvB,QAAI,IAAA,OAAO,WAAW,QAAU,EAAA;AAC9B,UACE,IAAK,CAAA,MAAA,CAAO,QACZ,CAAA,uBAAA,CAAwB,MAAM,CAAA,CAAA;AAAA,SAC3B,MAAA;AACL,UACE,IAAA,CAAK,MAAO,CAAA,QAAA,CACZ,oBAAqB,EAAA,CAAA;AAAA,SACzB;AAEA,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEA,OAAA,EAAS,MAAM,MAAM;AACnB,QAAC,IAAA,CAAK,MAAO,CAAA,QAAA,CAAmC,eAAgB,EAAA,CAAA;AAEhE,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEA,0BACE,MACA,CAAC,EAAE,EAAA,EAAI,MAAyB,KAAA;AAC9B,QAAM,MAAA,YAAA,GAAe,KAAK,OAAQ,CAAA,KAAA,CAAA;AAGlC,QAAI,IAAA,YAAA,CAAa,UAAU,WAAa,EAAA;AACtC,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAGA,QAAI,IAAA,8BAAA,CAA+B,YAAa,CAAA,QAAQ,CAAG,EAAA;AAEzD,UAAM,MAAA,OAAA,GAAU,aAAc,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AACzC,UAAA,IAAI,CAAC,OAAS,EAAA;AACZ,YAAO,OAAA,KAAA,CAAA;AAAA,WACT;AAEA,UAAA,MAAM,eAAkB,GAAAH,8CAAA;AAAA,YACtB,OAAQ,CAAA,IAAA;AAAA,YACR,IAAA,CAAK,OAAO,KAAM,CAAA,MAAA;AAAA,WACpB,CAAA;AACA,UAAG,EAAA,CAAA,OAAA,CAAQ,gBAAgB,KAAK,CAAA,CAAA;AAChC,UAAG,EAAA,CAAA,OAAA;AAAA,YACD,CAAA;AAAA,YACA,IAAK,CAAA,MAAA,CAAO,KAAM,CAAA,GAAA,CAAI,OAAQ,CAAA,IAAA;AAAA,YAC9B,IAAIC,WAAM,CAAAC,cAAA,CAAS,KAAK,eAAe,CAAA,EAAG,GAAG,CAAC,CAAA;AAAA,WAChD,CAAA;AACA,UAAA,EAAA,CAAG,QAAQJ,2BAAgB,EAAA;AAAA,YACzB,QAAU,EAAA,IAAA;AAAA,YACV,YAAc,EAAA,IAAA;AAAA,WACf,CAAA,CAAA;AAED,UAAA,IAAA,CAAK,QAAQ,QAAW,GAAA,KAAA,CAAA,CAAA;AAAA,SACnB,MAAA;AAGL,UAAA,MAAM,UAAa,GAAA,YAAA,CAAa,QAAS,CAAA,IAAA,CACtC,MAAM,IAAI,CAAA,CACV,GAAI,CAAA,CAAC,SAAc,KAAA,eAAA,CAAgB,IAAK,CAAA,MAAA,EAAQ,SAAS,CAAC,CAAA,CAAA;AAE7D,UAAG,EAAA,CAAA,MAAA,CAAO,KAAK,MAAO,CAAA,KAAA,CAAM,UAAU,GAAI,CAAA,GAAA,IAAO,UAAU,CAAA,CAAA;AAC3D,UAAG,EAAA,CAAA,OAAA,CAAQ,gBAAgB,IAAI,CAAA,CAAA;AAC/B,UAAA,IAAA,CAAK,SAAS,EAAE,CAAA,CAAA;AAEhB,UAAG,EAAA,CAAA,OAAA,CAAQ,mBAAmB,IAAI,CAAA,CAAA;AAAA,SACpC;AAGA,QAAyB,wBAAA,CAAA,IAAA,CAAK,MAAM,CAAA,EAAG,OAAQ,EAAA,CAAA;AAC/C,QAAK,IAAA,CAAA,MAAA,CAAO,YAAY,IAAI,CAAA,CAAA;AAG5B,QAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,GAAQ,EAAE,KAAA,EAAO,QAAS,EAAA,CAAA;AAEvC,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEF,iBACE,MACA,CAAC,EAAE,EAAA,EAAI,MAAyB,KAAA;AAC9B,QAAM,MAAA,YAAA,GAAe,KAAK,OAAQ,CAAA,KAAA,CAAA;AAGlC,QAAI,IAAA,YAAA,CAAa,UAAU,QAAU,EAAA;AACnC,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAGA,QAAI,IAAA,YAAA,CAAa,UAAU,UAAY,EAAA;AACrC,UAAA,YAAA,CAAa,gBAAgB,KAAM,EAAA,CAAA;AAAA,SACrC;AAGA,QAAA,IACE,YAAa,CAAA,KAAA,KAAU,UACvB,IAAA,YAAA,CAAa,UAAU,WACvB,EAAA;AAEA,UAAA,MAAM,QAAW,GAAA,oBAAA;AAAA,YACf,EAAA;AAAA,YACA,IAAK,CAAA,MAAA;AAAA,YACL,IAAK,CAAA,OAAA;AAAA,YACL,KAAK,OAAQ,CAAA,GAAA;AAAA,WACf,CAAA;AACA,UAAA,IAAI,QAAU,EAAA;AACZ,YAAA,IAAA,CAAK,SAAS,QAAQ,CAAA,CAAA;AAEtB,YAAG,EAAA,CAAA,OAAA,CAAQ,mBAAmB,IAAI,CAAA,CAAA;AAAA,WACpC;AAAA,SACF;AAGA,QAAA,IAAA,CAAK,MAAO,CAAA,QAAA,CAAS,gBAAiB,CAAA,YAAA,CAAa,gBAAgB,CAAA,CAAA;AAGnE,QAAyB,wBAAA,CAAA,IAAA,CAAK,MAAM,CAAA,EAAG,OAAQ,EAAA,CAAA;AAC/C,QAAK,IAAA,CAAA,MAAA,CAAO,YAAY,IAAI,CAAA,CAAA;AAG5B,QAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,GAAQ,EAAE,KAAA,EAAO,QAAS,EAAA,CAAA;AAEvC,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEF,oBAAA,EAAsB,MAAM,MAAM;AAChC,QAAM,MAAA,YAAA,GAAe,KAAK,OAAQ,CAAA,KAAA,CAAA;AAGlC,QAAI,IAAA,YAAA,CAAa,UAAU,QAAU,EAAA;AACnC,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAGA,QAAI,IAAA,IAAA,CAAK,OAAO,SAAW,EAAA;AACzB,UAAK,IAAA,CAAA,MAAA,CAAO,SAAS,IAAK,EAAA,CAAA;AAAA,SAC5B;AAGA,QAAA,IAAA,CAAK,QAAQ,KAAQ,GAAA;AAAA,UACnB,KAAO,EAAA,QAAA;AAAA,UAEP,gBAAkB,EAAA;AAAA,YAChB,IAAM,EAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,SAAU,CAAA,IAAA;AAAA,YAClC,EAAI,EAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,SAAU,CAAA,EAAA;AAAA,WAClC;AAAA,UAEA,YAAc,EAAA,EAAA;AAAA,SAChB,CAAA;AAEA,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEA,uBAAA,EACE,CAAC,MAAgB,EAAA,oBAAA,KACjB,CAAC,EAAE,EAAA,EAAI,MAAyB,KAAA;AAC9B,QAAM,MAAA,YAAA,GAAe,KAAK,OAAQ,CAAA,KAAA,CAAA;AAGlC,QAAI,IAAA,YAAA,CAAa,UAAU,UAAY,EAAA;AACrC,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAGA,QAAI,IAAA,IAAA,CAAK,OAAO,SAAW,EAAA;AACzB,UAAK,IAAA,CAAA,MAAA,CAAO,SAAS,IAAK,EAAA,CAAA;AAAA,SAC5B;AAEA,QAAM,MAAA,eAAA,GAAkB,IAAI,eAAgB,EAAA,CAAA;AAC5C,QAAM,MAAA,QAAA,GAAW,wBAAyB,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAGrD,QAAI,IAAA,YAAA,CAAa,UAAU,WAAa,EAAA;AAEtC,UAAA,MAAM,QAAW,GAAA,oBAAA;AAAA,YACf,EAAA;AAAA,YACA,IAAK,CAAA,MAAA;AAAA,YACL,IAAK,CAAA,OAAA;AAAA,YACL,KAAK,OAAQ,CAAA,GAAA;AAAA,WACf,CAAA;AACA,UAAA,IAAI,QAAU,EAAA;AAEZ,YAAA,IAAA,CAAK,SAAS,QAAQ,CAAA,CAAA;AAEtB,YAAG,EAAA,CAAA,OAAA,CAAQ,mBAAmB,IAAI,CAAA,CAAA;AAAA,WACpC;AAGA,UAAA,IAAA,CAAK,OAAO,QAAS,CAAA,gBAAA;AAAA,YACnB,YAAa,CAAA,gBAAA;AAAA,WACf,CAAA;AAAA,SACF;AAGA,QAAA,IAAA,CAAK,QAAQ,KAAQ,GAAA;AAAA,UACnB,KAAO,EAAA,UAAA;AAAA,UAEP,gBAAA,EAAkB,aAAa,gBAAoB,IAAA;AAAA,YACjD,IAAM,EAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,SAAU,CAAA,IAAA;AAAA,YAClC,EAAI,EAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,SAAU,CAAA,EAAA;AAAA,WAClC;AAAA,UAEA,YAAA,EAAc,aAAa,YAAgB,IAAA,EAAA;AAAA,UAC3C,MAAA;AAAA,UACA,eAAA;AAAA,UACA,kBAAkB,YAAa,CAAA,QAAA;AAAA,SACjC,CAAA;AAGA,QAAK,IAAA,CAAA,MAAA,CAAO,YAAY,KAAK,CAAA,CAAA;AAG7B,QAAAM,gBAAA;AAAA,UACE,YAAY;AACV,YAAA,MAAM,UAAU,KAAM,EAAA,CAAA;AAGtB,YAAA,MAAM,QAAY,GAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,uBAAwB,CAAA;AAAA,cAC3D,MAAA;AAAA,cACA,OAAS,EAAAC,gCAAA,CAA2B,IAAK,CAAA,MAAA,EAAQ,GAAK,CAAA;AAAA,cACtD,QAAQ,eAAgB,CAAA,MAAA;AAAA,cACxB,QACE,EAAA,oBAAA,IAAwB,YAAa,CAAA,KAAA,KAAU,WAC3C,GAAA;AAAA,gBACE,QAAQ,YAAa,CAAA,MAAA;AAAA,gBACrB,QAAU,EAAA;AAAA,kBACR,IAAA,EAAM,aAAa,QAAU,EAAA,IAAA;AAAA,kBAC7B,IAAA,EAAM,aAAa,QAAU,EAAA,IAAA;AAAA,iBAC/B;AAAA,eAEF,GAAA,KAAA,CAAA;AAAA,aACP,CAAA,CAAA;AAGD,YAAI,IAAA,iCAAA,CAAkC,QAAQ,CAAG,EAAA;AAC/C,cAAO,OAAA,QAAA,CAAA;AAAA,aACF,MAAA;AACL,cAAM,MAAA,IAAI,MAAM,8BAA8B,CAAA,CAAA;AAAA,aAChD;AAAA,WACF;AAAA,UACA,gCAAA;AAAA,UACA,8BAAA;AAAA,UAEA,CAAC,KAAU,KAAA;AAET,YACE,OAAA,eAAA,CAAgB,OAAO,OACtB,IAAA,KAAA,YAAiBC,oBAChB,KAAM,CAAA,MAAA,IAAU,GAChB,IAAA,KAAA,CAAM,MAAS,GAAA,GAAA,CAAA;AAAA,WAErB;AAAA,SACF,CACG,IAAK,CAAA,CAAC,QAAa,KAAA;AAClB,UAAI,IAAA,eAAA,CAAgB,OAAO,OAAS,EAAA;AAClC,YAAA,OAAA;AAAA,WACF;AAGA,UACE,IAAA,CAAK,MAAO,CAAA,QAAA,CACZ,+BAAgC,CAAA;AAAA,YAChC,MAAM,QAAS,CAAA,IAAA;AAAA,YACf,MAAM,QAAS,CAAA,IAAA;AAAA,WAChB,CAAA,CAAA;AAAA,SACF,CAAA,CACA,KAAM,CAAA,CAAC,KAAU,KAAA;AAChB,UAAI,IAAA,eAAA,CAAgB,OAAO,OAAS,EAAA;AAClC,YAAA,OAAA;AAAA,WACF;AAGA,UACE,IAAK,CAAA,MAAA,CAAO,QACZ,CAAA,6BAAA,CAA8B,KAAK,CAAA,CAAA;AAAA,SACtC,CAAA,CAAA;AAEH,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEF,wBAAA,EAA0B,MAAM,MAAM;AACpC,QAAM,MAAA,YAAA,GAAe,KAAK,OAAQ,CAAA,KAAA,CAAA;AAGlC,QAAI,IAAA,YAAA,CAAa,UAAU,UAAY,EAAA;AACrC,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAGA,QAAA,YAAA,CAAa,gBAAgB,KAAM,EAAA,CAAA;AAGnC,QAAK,IAAA,CAAA,MAAA,CAAO,YAAY,IAAI,CAAA,CAAA;AAG5B,QAAA,IAAA,CAAK,QAAQ,KAAQ,GAAA;AAAA,UACnB,KAAO,EAAA,QAAA;AAAA,UACP,kBAAkB,YAAa,CAAA,gBAAA;AAAA,UAE/B,cACE,YAAa,CAAA,MAAA,KAAW,YAAa,CAAA,YAAA,GACjC,aAAa,YACb,GAAA,EAAA;AAAA,SACR,CAAA;AAEA,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEA,2BAAA,EAA6B,MAAM,MAAM;AAEvC,QAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAM,CAAA,KAAA,KAAU,WAAa,EAAA;AAC5C,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAEA,QAAA,IAAI,CAAC,IAAK,CAAA,OAAA,CAAQ,OAAO,CAAC,IAAA,CAAK,QAAQ,QAAU,EAAA;AAC/C,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAEA,QAAM,MAAA,gBAAA,GACJ,IAAK,CAAA,OAAA,CAAQ,QAAY,IAAAC,iBAAA,CAAA;AAC3B,QAAA,MAAM,eAAkB,GAAAC,YAAA,CAAa,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAA;AAErD,QAAI,IAAAC,kBAAA,CAAe,gBAAkB,EAAA,eAAe,CAAG,EAAA;AACrD,UAAO,OAAA,IAAA,CAAA;AAAA,SACT;AAEA,QAAc,aAAA,CAAA,IAAA,CAAK,MAAM,CAAG,EAAA,cAAA;AAAA,UAC1B,eAAA;AAAA,UACA,gBAAA;AAAA,SACF,CAAA;AAEA,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEA,iCACE,CAAC,QAAA,KACD,CAAC,EAAE,IAAA,EAAM,IAAuB,KAAA;AAC9B,QAAM,MAAA,YAAA,GAAe,KAAK,OAAQ,CAAA,KAAA,CAAA;AAGlC,QAAI,IAAA,YAAA,CAAa,UAAU,UAAY,EAAA;AACrC,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAGA,QAAI,IAAA,CAAC,8BAA+B,CAAA,QAAQ,CAAG,EAAA;AAC7C,UAAA,IAAA,CAAK,QAAQ,KAAQ,GAAA;AAAA,YACnB,KAAO,EAAA,WAAA;AAAA,YACP,kBAAkB,YAAa,CAAA,gBAAA;AAAA,YAC/B,YAAc,EAAA,EAAA;AAAA,YACd,QAAQ,YAAa,CAAA,MAAA;AAAA,YACrB,QAAA;AAAA,WACF,CAAA;AAEA,UAAO,OAAA,IAAA,CAAA;AAAA,SACT;AAEA,QAAI,IAAA,CAAC,IAAK,CAAA,OAAA,CAAQ,GAAK,EAAA;AACrB,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAGA,QAAK,IAAA,CAAA,OAAA,CAAQ,IAAI,EAAK,GAAA,KAAA,CAAA;AACtB,QAAA,IAAA,CAAK,OAAQ,CAAA,QAAA,GAAWD,YAAa,CAAA,IAAA,CAAK,QAAQ,GAAG,CAAA,CAAA;AAGrD,QAAA,IAAA,CAAK,QAAQ,KAAQ,GAAA;AAAA,UACnB,KAAO,EAAA,WAAA;AAAA,UACP,kBAAkB,YAAa,CAAA,gBAAA;AAAA,UAC/B,YAAc,EAAA,EAAA;AAAA,UACd,QAAQ,YAAa,CAAA,MAAA;AAAA,UACrB,QAAA;AAAA,SACF,CAAA;AAGA,QAAA,MAAM,CAAC,cAAmB,EAAA,GAAA,eAAe,IACvC,QAAS,CAAA,IAAA,CAAK,MAAM,IAAI,CAAA,CAAA;AAE1B,QAAG,EAAA,CAAA,UAAA;AAAA,UACD,cAAA;AAAA,UACA,QAAA,CAAS,IAAS,KAAA,QAAA,GACd,IAAK,CAAA,MAAA,CAAO,KAAM,CAAA,SAAA,CAAU,EAC5B,GAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,SAAU,CAAA,IAAA;AAAA,UAChC,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,SAAU,CAAA,EAAA;AAAA,SAC9B,CAAA;AAEA,QAAI,IAAA,eAAA,CAAgB,SAAS,CAAG,EAAA;AAC9B,UAAA,MAAM,aAAa,eAAgB,CAAA,GAAA;AAAA,YAAI,CAAC,SAAA,KACtC,eAAgB,CAAA,IAAA,CAAK,QAAQ,SAAS,CAAA;AAAA,WACxC,CAAA;AAEA,UAAA,EAAA,CAAG,MAAO,CAAA,EAAA,CAAG,SAAU,CAAA,GAAA,CAAI,KAAK,UAAU,CAAA,CAAA;AAAA,SAC5C;AAEA,QAAA,IAAA,CAAK,SAAS,EAAE,CAAA,CAAA;AAEhB,QAAG,EAAA,CAAA,OAAA,CAAQ,mBAAmB,IAAI,CAAA,CAAA;AAGlC,QACE,IAAA,CAAK,MAAO,CAAA,QAAA,CACZ,2BAA4B,EAAA,CAAA;AAI9B,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEF,6BAAA,EAA+B,CAAC,KAAA,KAAmB,MAAM;AACvD,QAAM,MAAA,YAAA,GAAe,KAAK,OAAQ,CAAA,KAAA,CAAA;AAGlC,QAAI,IAAA,YAAA,CAAa,UAAU,UAAY,EAAA;AACrC,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAGA,QAAK,IAAA,CAAA,MAAA,CAAO,YAAY,IAAI,CAAA,CAAA;AAG5B,QAAA,OAAA,CAAQ,MAAM,KAAK,CAAA,CAAA;AAGnB,QAAA,IAAA,CAAK,QAAQ,KAAQ,GAAA;AAAA,UACnB,KAAO,EAAA,QAAA;AAAA,UACP,kBAAkB,YAAa,CAAA,gBAAA;AAAA,UAE/B,cACE,YAAa,CAAA,MAAA,KAAW,YAAa,CAAA,YAAA,GACjC,aAAa,YACb,GAAA,EAAA;AAAA,UAEN,KACE,EAAA,KAAA,YAAiB,KACb,GAAA,KAAA,GACA,IAAI,KAAA,CAAM,MAAO,CAAA,KAAK,CAAG,EAAA,EAAE,KAAO,EAAA,KAAA,EAAO,CAAA;AAAA,SACjD,CAAA;AAEA,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,MAEA,4BAAA,EACE,CAAC,YAAA,KACD,MAAM;AACJ,QAAM,MAAA,YAAA,GAAe,KAAK,OAAQ,CAAA,KAAA,CAAA;AAGlC,QAAI,IAAA,OAAO,YAAa,CAAA,YAAA,KAAiB,QAAU,EAAA;AACjD,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAGA,QAAK,IAAA,CAAA,OAAA,CAAQ,MAAM,YACjB,GAAA,OAAO,iBAAiB,UACpB,GAAA,YAAA,CAAa,YAAa,CAAA,YAAY,CACtC,GAAA,YAAA,CAAA;AAEN,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,KACJ,CAAA;AAAA,GACF;AAAA,EACA,qBAAwB,GAAA;AACtB,IAAO,OAAA;AAAA,MACL,IAAIE,YAAO,CAAA;AAAA,QACT,GAAK,EAAAC,iCAAA;AAAA,QACL,KAAO,EAAA;AAAA,UACL,WAAa,EAAA,CAAC,EAAE,GAAA,EAAK,WAAgB,KAAA;AAEnC,YAAA,IACE,IAAK,CAAA,OAAA,CAAQ,KAAM,CAAA,KAAA,KAAU,YAC5B,IAAK,CAAA,OAAA,CAAQ,KAAM,CAAA,KAAA,KAAU,eAC5B,8BAA+B,CAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAM,QAAQ,CAC5D,EAAA;AACA,cAAA,OAAOC,kBAAc,CAAA,MAAA,CAAO,GAAK,EAAA,EAAE,CAAA,CAAA;AAAA,aACrC;AAEA,YAAM,MAAA,EAAE,IAAM,EAAA,EAAA,EAAO,GAAA,SAAA,CAAA;AACrB,YAAA,MAAM,WAA4B,GAAA;AAAA,cAChCC,eAAA,CAAW,MAAO,CAAA,IAAA,EAAM,EAAI,EAAA;AAAA,gBAC1B,KAAO,EAAA,iDAAA;AAAA,eACR,CAAA;AAAA,aACH,CAAA;AAEA,YAAO,OAAAD,kBAAA,CAAc,MAAO,CAAA,GAAA,EAAK,WAAW,CAAA,CAAA;AAAA,WAC9C;AAAA,SACF;AAAA,OACD,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AACF,CAAC;;;;;;"}