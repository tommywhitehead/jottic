{"version":3,"file":"CommentsExtension.js","sources":["../../src/comments/CommentsExtension.ts"],"sourcesContent":["import { Extension, Mark, mergeAttributes } from \"@tiptap/core\";\nimport type { Node } from \"@tiptap/pm/model\";\nimport type { Transaction } from \"@tiptap/pm/state\";\nimport { Plugin, PluginKey } from \"@tiptap/pm/state\";\nimport { Decoration, DecorationSet } from \"@tiptap/pm/view\";\nimport { ySyncPluginKey } from \"y-prosemirror\";\n\nimport type { CommentsExtensionStorage, ThreadPluginState } from \"../types\";\nimport {\n  LIVEBLOCKS_COMMENT_MARK_TYPE,\n  ThreadPluginActions,\n  THREADS_ACTIVE_SELECTION_PLUGIN,\n  THREADS_PLUGIN_KEY,\n} from \"../types\";\n\ntype ThreadPluginAction = {\n  name: ThreadPluginActions;\n  data: string | null;\n};\n\nexport const FILTERED_THREADS_PLUGIN_KEY = new PluginKey<{\n  filteredThreads?: Set<string>;\n}>();\n\n/**\n * Known issues: Overlapping marks are merged when reloading the doc. May be related:\n * https://github.com/ueberdosis/tiptap/issues/4339\n * https://github.com/yjs/y-prosemirror/issues/47\n */\nconst Comment = Mark.create({\n  name: LIVEBLOCKS_COMMENT_MARK_TYPE,\n  excludes: \"\",\n  inclusive: false,\n  keepOnSplit: true,\n  parseHTML: () => {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (node) =>\n          node.getAttribute(\"data-lb-thread-id\") !== null && null,\n      },\n    ];\n  },\n  addAttributes() {\n    // Return an object with attribute configuration\n    return {\n      orphan: {\n        parseHTML: (element) => !!element.getAttribute(\"data-orphan\"),\n        renderHTML: (attributes) => {\n          return (attributes as { orphan: boolean }).orphan\n            ? {\n                \"data-orphan\": \"true\",\n              }\n            : {};\n        },\n        default: false,\n      },\n      threadId: {\n        parseHTML: (element) => element.getAttribute(\"data-lb-thread-id\"),\n        renderHTML: (attributes) => {\n          return {\n            \"data-lb-thread-id\": (attributes as { threadId: string }).threadId,\n          };\n        },\n        default: \"\",\n      },\n    };\n  },\n\n  renderHTML({ HTMLAttributes }: { HTMLAttributes: Record<string, any> }) {\n    const filteredThreads = this.editor\n      ? FILTERED_THREADS_PLUGIN_KEY.getState(this.editor.state)?.filteredThreads\n      : undefined;\n    const threadId = (HTMLAttributes as { [\"data-lb-thread-id\"]: string })[\n      \"data-lb-thread-id\"\n    ];\n    if (filteredThreads && !filteredThreads.has(threadId)) {\n      return [\n        \"span\",\n        mergeAttributes(HTMLAttributes, {\n          class: \"lb-root lb-tiptap-thread-mark\",\n          \"data-hidden\": \"\",\n        }),\n      ];\n    }\n\n    return [\n      \"span\",\n      mergeAttributes(HTMLAttributes, {\n        class: \"lb-root lb-tiptap-thread-mark\",\n      }),\n    ];\n  },\n\n  /**\n   * This plugin tracks the (first) position of each thread mark in the doc and creates a decoration for the selected thread\n   */\n  addProseMirrorPlugins() {\n    const updateState = (doc: Node, selectedThreadId: string | null) => {\n      const threadPositions = new Map<string, { from: number; to: number }>();\n      const decorations: Decoration[] = [];\n      // find all thread marks and store their position + create decoration for selected thread\n      doc.descendants((node, pos) => {\n        node.marks.forEach((mark) => {\n          if (mark.type === this.type) {\n            const thisThreadId = (\n              mark.attrs as { threadId: string | undefined }\n            ).threadId;\n            if (!thisThreadId) {\n              return;\n            }\n            const from = pos;\n            const to = from + node.nodeSize;\n\n            // FloatingThreads component uses \"to\" as the position, so always store the largest \"to\" found\n            // AnchoredThreads component uses \"from\" as the position, so always store the smallest \"from\" found\n            const currentPosition = threadPositions.get(thisThreadId) ?? {\n              from: Infinity,\n              to: 0,\n            };\n            threadPositions.set(thisThreadId, {\n              from: Math.min(from, currentPosition.from),\n              to: Math.max(to, currentPosition.to),\n            });\n\n            if (selectedThreadId === thisThreadId) {\n              decorations.push(\n                Decoration.inline(from, to, {\n                  class: \"lb-root lb-tiptap-thread-mark-selected\",\n                })\n              );\n\n              const decoration = this.editor.view.dom.querySelector(\n                `.lb-tiptap-thread-mark[data-lb-thread-id=\"${thisThreadId}\"]`\n              );\n\n              if (decoration) {\n                decoration.scrollIntoView({\n                  behavior: \"smooth\",\n                  block: \"nearest\",\n                });\n              }\n            }\n          }\n        });\n      });\n      return {\n        decorations: DecorationSet.create(doc, decorations),\n        selectedThreadId,\n        threadPositions,\n        selectedThreadPos:\n          selectedThreadId !== null\n            ? (threadPositions.get(selectedThreadId)?.to ?? null)\n            : null,\n      };\n    };\n\n    return [\n      new Plugin({\n        key: THREADS_PLUGIN_KEY,\n        state: {\n          init() {\n            return {\n              threadPositions: new Map<string, { from: number; to: number }>(),\n              selectedThreadId: null,\n              selectedThreadPos: null,\n              decorations: DecorationSet.empty,\n            } as ThreadPluginState;\n          },\n          apply(tr, state) {\n            const action = tr.getMeta(THREADS_PLUGIN_KEY) as ThreadPluginAction;\n            if (!tr.docChanged && !action) {\n              return state;\n            }\n\n            if (!action) {\n              // Doc changed, but no action, just update rects\n              return updateState(tr.doc, state.selectedThreadId);\n            }\n            // handle actions, possibly support more actions\n            if (\n              action.name === ThreadPluginActions.SET_SELECTED_THREAD_ID &&\n              state.selectedThreadId !== action.data\n            ) {\n              return updateState(tr.doc, action.data);\n            }\n\n            return state;\n          },\n        },\n        props: {\n          decorations: (state) => {\n            return (\n              THREADS_PLUGIN_KEY.getState(state)?.decorations ??\n              DecorationSet.empty\n            );\n          },\n          handleClick: (view, pos, event) => {\n            if (event.button !== 0) {\n              return;\n            }\n\n            const selectThread = (threadId: string | null) => {\n              view.dispatch(\n                view.state.tr.setMeta(THREADS_PLUGIN_KEY, {\n                  name: ThreadPluginActions.SET_SELECTED_THREAD_ID,\n                  data: threadId,\n                })\n              );\n            };\n\n            const node = view.state.doc.nodeAt(pos);\n            if (!node) {\n              selectThread(null);\n              return;\n            }\n            const commentMark = node.marks.find(\n              (mark) => mark.type === this.type && !mark.attrs.orphan\n            );\n            // nothing to select\n            if (!commentMark) {\n              selectThread(null);\n              return;\n            }\n            const threadId = commentMark?.attrs.threadId as string | undefined;\n\n            const filtered = FILTERED_THREADS_PLUGIN_KEY.getState(\n              view.state\n            )?.filteredThreads;\n            if (threadId && filtered && !filtered.has(threadId)) {\n              selectThread(null);\n              return;\n            }\n\n            selectThread(threadId ?? null);\n          },\n        },\n      }),\n    ];\n  },\n});\n\nexport const CommentsExtension = Extension.create<\n  { filteredThreads?: Set<string> },\n  CommentsExtensionStorage\n>({\n  name: \"liveblocksComments\",\n  priority: 95,\n  addExtensions() {\n    return [Comment];\n  },\n\n  addStorage() {\n    return {\n      pendingComment: false,\n    };\n  },\n\n  addCommands() {\n    return {\n      addPendingComment: () => () => {\n        if (this.editor.state.selection.empty) {\n          return false;\n        }\n        // unselect any open threads\n        this.editor.view.dispatch(\n          this.editor.state.tr.setMeta(THREADS_PLUGIN_KEY, {\n            name: ThreadPluginActions.SET_SELECTED_THREAD_ID,\n            data: null,\n          })\n        );\n        this.storage.pendingComment = true;\n        return true;\n      },\n      closePendingComment: () => () => {\n        this.storage.pendingComment = false;\n        return true;\n      },\n      selectThread: (id: string | null) => () => {\n        const filtered = FILTERED_THREADS_PLUGIN_KEY.getState(\n          this.editor.state\n        )?.filteredThreads;\n        if (id && filtered && !filtered.has(id)) {\n          this.editor.view.dispatch(\n            this.editor.state.tr.setMeta(THREADS_PLUGIN_KEY, {\n              name: ThreadPluginActions.SET_SELECTED_THREAD_ID,\n              data: null,\n            })\n          );\n          return true;\n        }\n\n        this.editor.view.dispatch(\n          this.editor.state.tr.setMeta(THREADS_PLUGIN_KEY, {\n            name: ThreadPluginActions.SET_SELECTED_THREAD_ID,\n            data: id,\n          })\n        );\n        return true;\n      },\n      addComment:\n        (id: string) =>\n        ({ commands }) => {\n          if (\n            !this.storage.pendingComment ||\n            this.editor.state.selection.empty\n          ) {\n            return false;\n          }\n          commands.setMark(LIVEBLOCKS_COMMENT_MARK_TYPE, { threadId: id });\n          this.storage.pendingComment = false;\n          return true;\n        },\n    };\n  },\n\n  // @ts-expect-error - this is incorrectly typed upstream in Mark.ts of TipTap. This event does include transaction\n  // correct: https://github.com/ueberdosis/tiptap/blob/2ff327ced84df6865b4ef98947b667aa79992292/packages/core/src/types.ts#L60\n  // incorrect: https://github.com/ueberdosis/tiptap/blob/2ff327ced84df6865b4ef98947b667aa79992292/packages/core/src/Mark.ts#L330\n  onSelectionUpdate(\n    this: { storage: CommentsExtensionStorage }, // NOTE: there are more types here I didn't override, this gets removed after submitting PR to tiptap\n    { transaction }: { transaction: Transaction } // TODO: remove this after submitting PR to tiptap\n  ) {\n    // ignore changes made by yjs\n    if (!this.storage.pendingComment || transaction.getMeta(ySyncPluginKey)) {\n      return;\n    }\n    // if selection changes, hide the composer. We could keep the composer open and move it to the new selection?\n    this.storage.pendingComment = false;\n  },\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: THREADS_ACTIVE_SELECTION_PLUGIN,\n        props: {\n          decorations: ({ doc, selection }) => {\n            if (!this.storage.pendingComment) {\n              return DecorationSet.create(doc, []);\n            }\n            const { from, to } = selection;\n            const decorations: Decoration[] = [\n              Decoration.inline(from, to, {\n                class: \"lb-root lb-selection lb-tiptap-active-selection\",\n              }),\n            ];\n            return DecorationSet.create(doc, decorations);\n          },\n        },\n      }),\n      new Plugin({\n        key: FILTERED_THREADS_PLUGIN_KEY,\n        state: {\n          init: () => ({\n            filteredThreads: this.options.filteredThreads,\n          }),\n          apply(tr, value) {\n            const meta = tr.getMeta(FILTERED_THREADS_PLUGIN_KEY) as\n              | { filteredThreads?: Set<string> }\n              | undefined;\n            if (meta?.filteredThreads) {\n              return { filteredThreads: meta.filteredThreads };\n            }\n            return value;\n          },\n        },\n        view: (view) => {\n          const syncDom = () => {\n            const filteredThreads = FILTERED_THREADS_PLUGIN_KEY.getState(\n              view.state\n            )?.filteredThreads;\n\n            // Toggle attribute for all comment-mark spans\n            const els = view.dom.querySelectorAll<HTMLElement>(\n              \"span.lb-tiptap-thread-mark[data-lb-thread-id]\"\n            );\n            els.forEach((el) => {\n              const id = el.getAttribute(\"data-lb-thread-id\");\n              if (!id) return;\n              if (!filteredThreads || filteredThreads.has(id)) {\n                el.removeAttribute(\"data-hidden\");\n              } else {\n                el.setAttribute(\"data-hidden\", \"\");\n              }\n            });\n          };\n\n          queueMicrotask(syncDom);\n\n          return {\n            update: (view, prevState) => {\n              const curr = FILTERED_THREADS_PLUGIN_KEY.getState(\n                view.state\n              )?.filteredThreads;\n              const prev =\n                FILTERED_THREADS_PLUGIN_KEY.getState(\n                  prevState\n                )?.filteredThreads;\n\n              if (\n                !areSetsEqual(prev, curr) ||\n                view.state.doc !== prevState.doc\n              ) {\n                syncDom();\n\n                const selected = THREADS_PLUGIN_KEY.getState(\n                  view.state\n                )?.selectedThreadId;\n                if (selected && curr && !curr.has(selected)) {\n                  view.dispatch(\n                    view.state.tr.setMeta(THREADS_PLUGIN_KEY, {\n                      name: ThreadPluginActions.SET_SELECTED_THREAD_ID,\n                      data: null,\n                    })\n                  );\n                }\n              }\n            },\n          };\n        },\n      }),\n    ];\n  },\n});\n\nexport function areSetsEqual(a?: Set<string>, b?: Set<string>): boolean {\n  if (a === b) return true;\n  if (!a || !b) return false;\n  if (a.size !== b.size) return false;\n  for (const v of a) if (!b.has(v)) return false;\n  return true;\n}\n"],"names":["threadId","view"],"mappings":"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"}