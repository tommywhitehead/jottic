import { jsxs, jsx } from 'react/jsx-runtime';
import { useHistoryVersionData } from '@liveblocks/react';
import { useOverrides } from '@liveblocks/react-ui';
import { cn, SpinnerIcon, List, User, Button, RestoreIcon } from '@liveblocks/react-ui/_private';
import { useEditor, EditorContent } from '@tiptap/react';
import { forwardRef, useEffect, useCallback } from 'react';
import { yXmlFragmentToProseMirrorRootNode } from 'y-prosemirror';
import { Doc, applyUpdate } from 'yjs';

const AUTHORS_TRUNCATE = 3;
const HistoryVersionPreview = forwardRef(
  ({ version, editor: parentEditor, onVersionRestore, className, ...props }, forwardedRef) => {
    const $ = useOverrides();
    const { isLoading, data, error } = useHistoryVersionData(version.id);
    const previewEditor = useEditor({
      editable: false,
      extensions: parentEditor.extensionManager.extensions.filter(
        (e) => e.type !== "extension"
      )
    });
    useEffect(() => {
      if (data && previewEditor) {
        const doc = new Doc();
        applyUpdate(doc, data);
        const root = doc.getXmlFragment("default");
        const node = yXmlFragmentToProseMirrorRootNode(
          root,
          parentEditor.schema
        );
        previewEditor.commands.setContent(node.toJSON());
      }
    }, [data, previewEditor, parentEditor]);
    const restore = useCallback(() => {
      parentEditor.commands.setContent(previewEditor?.getJSON() ?? "");
      onVersionRestore?.(version);
    }, [onVersionRestore, parentEditor, previewEditor, version]);
    return /* @__PURE__ */ jsxs("div", {
      ...props,
      className: cn(
        "lb-root lb-history-version-preview lb-tiptap-version-preview",
        className
      ),
      ref: forwardedRef,
      children: [
        isLoading ? /* @__PURE__ */ jsx("div", {
          className: "lb-loading lb-history-version-preview-loading",
          children: /* @__PURE__ */ jsx(SpinnerIcon, {})
        }) : error ? /* @__PURE__ */ jsx("div", {
          className: "lb-error lb-history-version-preview-error",
          children: $.HISTORY_VERSION_PREVIEW_ERROR(error)
        }) : /* @__PURE__ */ jsx("div", {
          className: "lb-history-version-preview-content lb-tiptap-editor-container lb-tiptap-version-preview-editor-container",
          children: /* @__PURE__ */ jsx(EditorContent, {
            editor: previewEditor
          })
        }),
        /* @__PURE__ */ jsxs("div", {
          className: "lb-history-version-preview-footer",
          children: [
            /* @__PURE__ */ jsx("span", {
              className: "lb-history-version-preview-authors",
              children: $.HISTORY_VERSION_PREVIEW_AUTHORS_LIST(
                /* @__PURE__ */ jsx(List, {
                  values: version.authors.map((author) => /* @__PURE__ */ jsx(User, {
                    userId: author.id,
                    replaceSelf: true
                  }, author.id)),
                  formatRemaining: $.LIST_REMAINING_USERS,
                  truncate: AUTHORS_TRUNCATE,
                  locale: $.locale
                })
              )
            }),
            /* @__PURE__ */ jsx("div", {
              className: "lb-history-version-preview-actions",
              children: /* @__PURE__ */ jsx(Button, {
                onClick: restore,
                disabled: !data,
                variant: "primary",
                size: "large",
                className: "lb-history-version-preview-action",
                icon: /* @__PURE__ */ jsx(RestoreIcon, {}),
                children: $.HISTORY_VERSION_PREVIEW_RESTORE
              })
            })
          ]
        })
      ]
    });
  }
);

export { HistoryVersionPreview };
//# sourceMappingURL=HistoryVersionPreview.js.map
