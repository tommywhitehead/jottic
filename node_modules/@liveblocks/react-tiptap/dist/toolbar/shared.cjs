'use strict';

var jsxRuntime = require('react/jsx-runtime');
var _private = require('@liveblocks/react/_private');
var react = require('react');

const FloatingToolbarContext = react.createContext(null);
const FloatingToolbarExternal = react.forwardRef(({ children, style, ...props }, forwardedRef) => {
  const id = react.useId();
  const externalId = `liveblocks-floating-toolbar-external-${id}`;
  const floatingToolbarContext = react.useContext(FloatingToolbarContext);
  const registerExternal = floatingToolbarContext?.registerExternal;
  _private.useLayoutEffect(() => {
    if (!registerExternal) {
      return;
    }
    return registerExternal(externalId);
  }, [registerExternal, externalId]);
  if (!floatingToolbarContext || react.Children.count(children) === 0) {
    return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, {
      children
    });
  }
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    ref: forwardedRef,
    style: { display: "contents", ...style },
    "data-liveblocks-floating-toolbar-external": id,
    ...props,
    id: externalId,
    children
  });
});

exports.FloatingToolbarContext = FloatingToolbarContext;
exports.FloatingToolbarExternal = FloatingToolbarExternal;
//# sourceMappingURL=shared.cjs.map
