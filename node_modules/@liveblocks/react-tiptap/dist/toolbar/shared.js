import { jsx, Fragment } from 'react/jsx-runtime';
import { useLayoutEffect } from '@liveblocks/react/_private';
import { createContext, forwardRef, useId, useContext, Children } from 'react';

const FloatingToolbarContext = createContext(null);
const FloatingToolbarExternal = forwardRef(({ children, style, ...props }, forwardedRef) => {
  const id = useId();
  const externalId = `liveblocks-floating-toolbar-external-${id}`;
  const floatingToolbarContext = useContext(FloatingToolbarContext);
  const registerExternal = floatingToolbarContext?.registerExternal;
  useLayoutEffect(() => {
    if (!registerExternal) {
      return;
    }
    return registerExternal(externalId);
  }, [registerExternal, externalId]);
  if (!floatingToolbarContext || Children.count(children) === 0) {
    return /* @__PURE__ */ jsx(Fragment, {
      children
    });
  }
  return /* @__PURE__ */ jsx("div", {
    ref: forwardedRef,
    style: { display: "contents", ...style },
    "data-liveblocks-floating-toolbar-external": id,
    ...props,
    id: externalId,
    children
  });
});

export { FloatingToolbarContext, FloatingToolbarExternal };
//# sourceMappingURL=shared.js.map
