{"version":3,"file":"overrides.js","sources":["../src/overrides.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  type AiReasoningPart,\n  type AiRetrievalPart,\n  assertNever,\n} from \"@liveblocks/core\";\nimport type { PropsWithChildren, ReactNode } from \"react\";\nimport { createContext, useContext, useMemo } from \"react\";\n\nimport { Emoji } from \"./components/internal/Emoji\";\nimport { Duration, getDuration } from \"./primitives/Duration\";\nimport type { ComposerBodyMark, Direction } from \"./types\";\nimport { pluralize } from \"./utils/pluralize\";\n\nconst MINIMUM_VISIBLE_DURATION = 3 * 1000;\n\n// TODO: Move overrides to single-argument-as-object with Liveblocks 4.0,\n//       it didn't make the cut for 3.0 but we should do it next time.\n\nexport interface LocalizationOverrides {\n  locale: string;\n  dir: Direction;\n}\n\nexport interface GlobalOverrides {\n  USER_SELF: string;\n  USER_UNKNOWN: string;\n  LIST_REMAINING: (count: number) => string;\n  LIST_REMAINING_USERS: (count: number) => string;\n  LIST_REMAINING_COMMENTS: (count: number) => string;\n  EMOJI_PICKER_SEARCH_PLACEHOLDER: string;\n  EMOJI_PICKER_EMPTY: ReactNode;\n  EMOJI_PICKER_ERROR: (error: Error) => ReactNode;\n  EMOJI_PICKER_CHANGE_SKIN_TONE: string;\n  ATTACHMENT_TOO_LARGE: (maxSize?: string) => string;\n  ATTACHMENT_ERROR: (error: Error) => string;\n  COPY_TO_CLIPBOARD: string;\n}\n\nexport interface CommentOverrides {\n  COMMENT_EDITED: ReactNode;\n  COMMENT_DELETED: ReactNode;\n  COMMENT_MORE: string;\n  COMMENT_EDIT: string;\n  COMMENT_EDIT_COMPOSER_PLACEHOLDER: string;\n  COMMENT_EDIT_COMPOSER_CANCEL: string;\n  COMMENT_EDIT_COMPOSER_SAVE: string;\n  COMMENT_DELETE: string;\n  COMMENT_DELETE_ATTACHMENT: string;\n  COMMENT_ADD_REACTION: string;\n  COMMENT_REACTION_LIST: (\n    list: ReactNode,\n    emoji: string,\n    count: number\n  ) => ReactNode;\n  COMMENT_REACTION_DESCRIPTION: (emoji: string, count: number) => string;\n}\n\nexport interface ComposerOverrides {\n  COMPOSER_INSERT_MENTION: string;\n  COMPOSER_INSERT_EMOJI: string;\n  COMPOSER_ATTACH_FILES: string;\n  COMPOSER_REMOVE_ATTACHMENT: string;\n  COMPOSER_PLACEHOLDER: string;\n  COMPOSER_SEND: string;\n  COMPOSER_TOGGLE_MARK: (mark: ComposerBodyMark) => string;\n}\n\nexport interface AiToolConfirmationOverrides {\n  AI_TOOL_CONFIRMATION_CONFIRM: string;\n  AI_TOOL_CONFIRMATION_CANCEL: string;\n}\n\nexport interface AiComposerOverrides {\n  AI_COMPOSER_PLACEHOLDER: string;\n  AI_COMPOSER_SEND: string;\n  AI_COMPOSER_ABORT: string;\n}\n\nexport interface AiChatMessageOverrides {\n  AI_CHAT_MESSAGE_DELETED: string;\n  AI_CHAT_MESSAGE_THINKING: ReactNode;\n  AI_CHAT_MESSAGE_REASONING: (\n    isStreaming: boolean,\n    part: AiReasoningPart\n  ) => ReactNode;\n  AI_CHAT_MESSAGE_RETRIEVAL: (\n    isStreaming: boolean,\n    part: AiRetrievalPart\n  ) => ReactNode;\n}\n\nexport interface AiChatOverrides {\n  AI_CHAT_MESSAGES_ERROR: (error: Error) => ReactNode;\n}\n\nexport interface ThreadOverrides {\n  THREAD_RESOLVE: string;\n  THREAD_UNRESOLVE: string;\n  THREAD_SUBSCRIBE: string;\n  THREAD_UNSUBSCRIBE: string;\n  THREAD_NEW_INDICATOR: string;\n  THREAD_NEW_INDICATOR_DESCRIPTION: string;\n  THREAD_SHOW_MORE_COMMENTS: (count: number) => string;\n  THREAD_COMPOSER_PLACEHOLDER: string;\n  THREAD_COMPOSER_SEND: string;\n}\n\nexport interface InboxNotificationOverrides {\n  INBOX_NOTIFICATION_MORE: string;\n  INBOX_NOTIFICATION_MARK_AS_READ: string;\n  INBOX_NOTIFICATION_DELETE: string;\n  INBOX_NOTIFICATION_THREAD_COMMENTS_LIST: (\n    list: ReactNode,\n    room: ReactNode | undefined,\n    count: number\n  ) => ReactNode;\n  INBOX_NOTIFICATION_THREAD_MENTION: (\n    user: ReactNode,\n    room: ReactNode | undefined\n  ) => ReactNode;\n  INBOX_NOTIFICATION_TEXT_MENTION: (\n    user: ReactNode,\n    room: ReactNode | undefined\n  ) => ReactNode;\n}\n\nexport interface HistoryVersionPreviewOverrides {\n  HISTORY_VERSION_PREVIEW_AUTHORS_LIST: (list: ReactNode) => ReactNode;\n  HISTORY_VERSION_PREVIEW_RESTORE: string;\n  HISTORY_VERSION_PREVIEW_EMPTY: ReactNode;\n  HISTORY_VERSION_PREVIEW_ERROR: (error: Error) => ReactNode;\n}\n\nexport type Overrides = LocalizationOverrides &\n  GlobalOverrides &\n  ComposerOverrides &\n  CommentOverrides &\n  ThreadOverrides &\n  InboxNotificationOverrides &\n  HistoryVersionPreviewOverrides &\n  AiComposerOverrides &\n  AiChatMessageOverrides &\n  AiChatOverrides &\n  AiToolConfirmationOverrides;\n\ntype OverridesProviderProps = PropsWithChildren<{\n  overrides?: Partial<Overrides>;\n}>;\n\nfunction isDurationVisible(\n  from: Date | string | number,\n  to: Date | string | number | undefined\n) {\n  return getDuration(from, to ?? Date.now()) >= MINIMUM_VISIBLE_DURATION;\n}\n\nexport const defaultOverrides: Overrides = {\n  locale: \"en\",\n  dir: \"ltr\",\n  USER_SELF: \"you\",\n  USER_UNKNOWN: \"Anonymous\",\n  COPY_TO_CLIPBOARD: \"Copy\",\n  LIST_REMAINING: (count) => `${count} more`,\n  LIST_REMAINING_USERS: (count) => `${count} ${pluralize(count, \"other\")}`,\n  LIST_REMAINING_COMMENTS: (count) =>\n    `${count} more ${pluralize(count, \"comment\")}`,\n  EMOJI_PICKER_SEARCH_PLACEHOLDER: \"Search…\",\n  EMOJI_PICKER_EMPTY: \"No emoji found.\",\n  EMOJI_PICKER_ERROR: () =>\n    \"There was an error while getting the list of emoji.\",\n  EMOJI_PICKER_CHANGE_SKIN_TONE: \"Change skin tone\",\n  ATTACHMENT_TOO_LARGE: (maxSize) =>\n    maxSize ? `The file is larger than ${maxSize}` : \"The file is too large\",\n  ATTACHMENT_ERROR: () => \"The file couldn’t be uploaded.\",\n  COMPOSER_INSERT_MENTION: \"Mention someone\",\n  COMPOSER_INSERT_EMOJI: \"Add emoji\",\n  COMPOSER_ATTACH_FILES: \"Attach files\",\n  COMPOSER_REMOVE_ATTACHMENT: \"Remove attachment\",\n  COMPOSER_PLACEHOLDER: \"Write a comment…\",\n  COMPOSER_SEND: \"Send\",\n  COMPOSER_TOGGLE_MARK: (format) => {\n    switch (format) {\n      case \"bold\":\n        return \"Bold\";\n      case \"italic\":\n        return \"Italic\";\n      case \"strikethrough\":\n        return \"Strikethrough\";\n      case \"code\":\n        return \"Inline code\";\n      default:\n        return assertNever(format, \"Unexpected mark\");\n    }\n  },\n  COMMENT_EDITED: \"(edited)\",\n  COMMENT_DELETED: \"This comment has been deleted.\",\n  COMMENT_MORE: \"More\",\n  COMMENT_EDIT: \"Edit comment\",\n  COMMENT_EDIT_COMPOSER_PLACEHOLDER: \"Edit comment…\",\n  COMMENT_EDIT_COMPOSER_CANCEL: \"Cancel\",\n  COMMENT_EDIT_COMPOSER_SAVE: \"Save\",\n  COMMENT_DELETE: \"Delete comment\",\n  COMMENT_DELETE_ATTACHMENT: \"Delete attachment\",\n  COMMENT_ADD_REACTION: \"Add reaction\",\n  COMMENT_REACTION_LIST: (list, emoji) => (\n    <>\n      {list} reacted with <Emoji emoji={emoji} />\n    </>\n  ),\n  COMMENT_REACTION_DESCRIPTION: (emoji, count) =>\n    `${count} ${pluralize(count, \"reaction\")}, react with ${emoji}`,\n  THREAD_RESOLVE: \"Resolve thread\",\n  THREAD_UNRESOLVE: \"Re-open thread\",\n  THREAD_SUBSCRIBE: \"Subscribe to thread\",\n  THREAD_UNSUBSCRIBE: \"Unsubscribe from thread\",\n  THREAD_NEW_INDICATOR: \"New\",\n  THREAD_NEW_INDICATOR_DESCRIPTION: \"New comments\",\n  THREAD_SHOW_MORE_COMMENTS: (count) =>\n    `Show ${count} more ${pluralize(count, \"reply\", \"replies\")}`,\n  THREAD_COMPOSER_PLACEHOLDER: \"Reply to thread…\",\n  THREAD_COMPOSER_SEND: \"Reply\",\n  INBOX_NOTIFICATION_MORE: \"More\",\n  INBOX_NOTIFICATION_MARK_AS_READ: \"Mark as read\",\n  INBOX_NOTIFICATION_DELETE: \"Delete notification\",\n  INBOX_NOTIFICATION_THREAD_COMMENTS_LIST: (\n    list: ReactNode,\n    room: ReactNode\n  ) => (\n    <>\n      {list} commented\n      {room ? <> in {room}</> : <> in a thread</>}\n    </>\n  ),\n  INBOX_NOTIFICATION_THREAD_MENTION: (user: ReactNode, room: ReactNode) => (\n    <>\n      {user} mentioned you{room ? <> in {room}</> : null}\n    </>\n  ),\n  INBOX_NOTIFICATION_TEXT_MENTION: (user: ReactNode, room: ReactNode) => (\n    <>\n      {user} mentioned you{room ? <> in {room}</> : null}\n    </>\n  ),\n  HISTORY_VERSION_PREVIEW_AUTHORS_LIST: (list: ReactNode) => (\n    <>Edits from {list}</>\n  ),\n  HISTORY_VERSION_PREVIEW_RESTORE: \"Restore\",\n  HISTORY_VERSION_PREVIEW_EMPTY: \"No content.\",\n  HISTORY_VERSION_PREVIEW_ERROR: () =>\n    \"There was an error while getting this version.\",\n  AI_COMPOSER_PLACEHOLDER: \"Ask anything…\",\n  AI_COMPOSER_SEND: \"Send\",\n  AI_COMPOSER_ABORT: \"Abort response\",\n  AI_CHAT_MESSAGE_DELETED: \"This message has been deleted.\",\n  AI_CHAT_MESSAGE_THINKING: \"Thinking…\",\n  AI_CHAT_MESSAGE_REASONING: (isStreaming: boolean, part: AiReasoningPart) =>\n    isStreaming ? (\n      <>Reasoning…</>\n    ) : (\n      <>\n        Reasoned\n        {isDurationVisible(part.startedAt, part.endedAt) ? (\n          <>\n            {\" \"}\n            for{\" \"}\n            <Duration\n              className=\"lb-duration lb-ai-chat-message-reasoning-duration\"\n              from={part.startedAt}\n              to={part.endedAt}\n            />\n          </>\n        ) : null}\n      </>\n    ),\n  AI_CHAT_MESSAGE_RETRIEVAL: (isStreaming: boolean, part: AiRetrievalPart) =>\n    isStreaming ? (\n      <>\n        Searching{\" \"}\n        <span className=\"lb-ai-chat-message-retrieval-query\">{part.query}</span>\n        …\n      </>\n    ) : (\n      <>\n        Searched{\" \"}\n        <span className=\"lb-ai-chat-message-retrieval-query\">{part.query}</span>\n        {isDurationVisible(part.startedAt, part.endedAt) ? (\n          <>\n            {\" \"}\n            for{\" \"}\n            <Duration\n              className=\"lb-duration lb-ai-chat-message-retrieval-duration\"\n              from={part.startedAt}\n              to={part.endedAt}\n            />\n          </>\n        ) : null}\n      </>\n    ),\n  AI_CHAT_MESSAGES_ERROR: () =>\n    \"There was an error while getting the messages.\",\n  AI_TOOL_CONFIRMATION_CONFIRM: \"Confirm\",\n  AI_TOOL_CONFIRMATION_CANCEL: \"Cancel\",\n};\n\nexport const OverridesContext = createContext<Overrides | undefined>(undefined);\n\nexport function useOverrides(overrides?: Partial<Overrides>): Overrides {\n  const contextOverrides = useContext(OverridesContext);\n\n  return useMemo(\n    () => ({\n      ...defaultOverrides,\n      ...contextOverrides,\n      ...overrides,\n    }),\n    [contextOverrides, overrides]\n  );\n}\n\nexport function OverridesProvider({\n  children,\n  overrides: providerOverrides,\n}: OverridesProviderProps) {\n  const contextOverrides = useContext(OverridesContext);\n  const overrides = useMemo(\n    () => ({\n      ...defaultOverrides,\n      ...contextOverrides,\n      ...providerOverrides,\n    }),\n    [contextOverrides, providerOverrides]\n  );\n\n  return (\n    <OverridesContext.Provider value={overrides}>\n      {children}\n    </OverridesContext.Provider>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;AAeA;AAwIA;AAIE;AACF;AAEO;AAAoC;AACjC;AACH;AACM;AACG;AACK;AACW;AACuC;AAExB;AACZ;AACb;AAElB;AAC6B;AAEoB;AAC3B;AACC;AACF;AACA;AACK;AACN;AACP;AAEb;AAAgB;AAEZ;AAAO;AAEP;AAAO;AAEP;AAAO;AAEP;AAAO;AAEP;AAA4C;AAChD;AACF;AACgB;AACC;AACH;AACA;AACqB;AACL;AACF;AACZ;AACW;AACL;AAEpB;AACG;AAAA;AAAK;AAAe;AAAM;AAAc;AAAA;AAC3C;AAGwD;AAC1C;AACE;AACA;AACE;AACE;AACY;AAEyB;AAC9B;AACP;AACG;AACQ;AACN;AAKzB;AACG;AAAA;AAAK;AACE;AAAE;AAAA;AAAK;AAAA;AAAW;AAAE;AAAY;AAAA;AAC1C;AAGA;AACG;AAAA;AAAK;AAAsB;AAAE;AAAA;AAAK;AAAA;AAAW;AAAA;AAChD;AAGA;AACG;AAAA;AAAK;AAAsB;AAAE;AAAA;AAAK;AAAA;AAAW;AAAA;AAChD;AAGA;AAAE;AAAA;AAAY;AAAA;AAAK;AAEY;AACF;AAE7B;AACuB;AACP;AACC;AACM;AACC;AAGtB;AAAE;AAEF;AAAE;AAAA;AAGE;AACG;AAAA;AAAI;AACD;AACH;AACW;AACC;AACF;AACX;AAAA;AAEA;AAAA;AACN;AAIA;AAAE;AAAA;AACU;AACT;AAAe;AAA2C;AAAM;AAAO;AAAA;AAI1E;AAAE;AAAA;AACS;AACR;AAAe;AAA2C;AAAM;AAE/D;AACG;AAAA;AAAI;AACD;AACH;AACW;AACC;AACF;AACX;AAAA;AAEA;AAAA;AACN;AAGF;AAC4B;AAEhC;AAEa;AAEN;AACL;AAEA;AAAO;AACE;AACF;AACA;AACA;AACL;AAC4B;AAEhC;AAEO;AAA2B;AAChC;AAEF;AACE;AACA;AAAkB;AACT;AACF;AACA;AACA;AACL;AACoC;AAGtC;AACG;AAAiC;AAC/B;AAGP;;"}