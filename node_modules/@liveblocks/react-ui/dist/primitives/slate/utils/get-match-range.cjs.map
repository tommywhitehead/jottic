{"version":3,"file":"get-match-range.cjs","sources":["../../../../src/primitives/slate/utils/get-match-range.ts"],"sourcesContent":["import type { Point as SlatePoint } from \"slate\";\nimport {\n  Editor as SlateEditor,\n  Path as SlatePath,\n  Range as SlateRange,\n} from \"slate\";\n\nimport { isWhitespaceCharacter } from \"./is-whitespace-character\";\n\ninterface Options {\n  include?: boolean;\n  direction?: \"before\" | \"after\" | \"both\";\n  allowConsecutiveWhitespace?: boolean;\n  ignoreTerminator?: (\n    character: string,\n    point: SlatePoint,\n    direction: \"before\" | \"after\"\n  ) => boolean;\n}\n\nconst defaultOptions: Options = {\n  direction: \"before\",\n  allowConsecutiveWhitespace: true,\n};\n\nexport function getMatchRange(\n  editor: SlateEditor,\n  at: SlateRange,\n  terminators: string[] = [\" \"],\n  options: Options = defaultOptions\n): SlateRange | undefined {\n  const { include, direction, ignoreTerminator, allowConsecutiveWhitespace } = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  let [start, end] = SlateRange.edges(at);\n  let point: SlatePoint = start;\n  let previousCharacterWasWhitespace = false;\n\n  function move(direction: \"before\" | \"after\"): boolean {\n    const nextPoint =\n      direction === \"after\"\n        ? SlateEditor.after(editor, point, { unit: \"character\" })\n        : SlateEditor.before(editor, point, { unit: \"character\" });\n\n    // Stop if we reached the end of a block\n    if (!nextPoint || SlatePath.compare(nextPoint.path, point.path) !== 0) {\n      return false;\n    }\n\n    const nextCharacter =\n      nextPoint &&\n      SlateEditor.string(\n        editor,\n        direction === \"after\"\n          ? { anchor: point, focus: nextPoint }\n          : { anchor: nextPoint, focus: point }\n      );\n    const lastCharacter =\n      nextCharacter &&\n      nextCharacter[direction === \"after\" ? 0 : nextCharacter.length - 1];\n\n    if (\n      !allowConsecutiveWhitespace &&\n      previousCharacterWasWhitespace &&\n      isWhitespaceCharacter(lastCharacter)\n    ) {\n      return false;\n    }\n\n    if (\n      nextPoint &&\n      lastCharacter &&\n      (!terminators.includes(lastCharacter) ||\n        ignoreTerminator?.(lastCharacter, nextPoint, direction))\n    ) {\n      previousCharacterWasWhitespace = isWhitespaceCharacter(lastCharacter);\n      point = nextPoint;\n\n      if (point.offset === 0) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  if (direction !== \"before\") {\n    point = end;\n    while (move(\"after\"));\n    end = point;\n  }\n\n  if (direction !== \"after\") {\n    point = start;\n    while (move(\"before\"));\n    start = point;\n  }\n\n  if (include) {\n    return {\n      anchor:\n        direction === \"before\" || direction === \"both\"\n          ? (SlateEditor.before(editor, start, { unit: \"offset\" }) ?? start)\n          : start,\n      focus:\n        direction === \"after\" || direction === \"both\"\n          ? (SlateEditor.after(editor, end, { unit: \"offset\" }) ?? end)\n          : end,\n    };\n  }\n\n  return { anchor: start, focus: end };\n}\n"],"names":["SlateRange","direction","SlateEditor","SlatePath","isWhitespaceCharacter"],"mappings":"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"}