{"version":3,"file":"AiChatUserMessage.cjs","sources":["../../../src/components/internal/AiChatUserMessage.tsx"],"sourcesContent":["import type { AiUserMessage, WithNavigation } from \"@liveblocks/core\";\nimport type { ComponentProps } from \"react\";\nimport { forwardRef, memo } from \"react\";\n\nimport type { GlobalComponents } from \"../../components\";\nimport { type GlobalOverrides, useOverrides } from \"../../overrides\";\nimport * as AiMessage from \"../../primitives/AiMessage\";\nimport type { AiMessageContentTextPartProps } from \"../../primitives/AiMessage/types\";\nimport type { MarkdownComponents } from \"../../primitives/Markdown\";\nimport { cn } from \"../../utils/cn\";\nimport { Prose } from \"./Prose\";\n\ntype UiUserMessage = WithNavigation<AiUserMessage>;\n\ntype AiChatUserMessageComponents = {\n  /**\n   * The components used to render Markdown content.\n   */\n  markdown?: Partial<MarkdownComponents>;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AiChatUserMessage\n * -----------------------------------------------------------------------------------------------*/\nexport interface AiChatUserMessageProps extends ComponentProps<\"div\"> {\n  /**\n   * The message to display.\n   */\n  message: UiUserMessage;\n\n  /**\n   * Override the component's strings.\n   */\n  overrides?: Partial<GlobalOverrides>;\n\n  /**\n   * Override the component's components.\n   */\n  components?: Partial<GlobalComponents & AiChatUserMessageComponents>;\n}\n\ninterface TextPartProps extends AiMessageContentTextPartProps {\n  components?: Partial<GlobalComponents & AiChatUserMessageComponents>;\n}\n\nfunction TextPart({ part, components }: TextPartProps) {\n  return (\n    <Prose\n      content={part.text}\n      className=\"lb-ai-chat-message-text\"\n      components={components}\n    />\n  );\n}\n\nexport const AiChatUserMessage = memo(\n  forwardRef<HTMLDivElement, AiChatUserMessageProps>(\n    ({ message, className, overrides, components, ...props }, forwardedRef) => {\n      const $ = useOverrides(overrides);\n      return (\n        <div\n          ref={forwardedRef}\n          className={cn(\n            \"lb-ai-chat-message lb-ai-chat-user-message\",\n            className\n          )}\n          {...props}\n        >\n          {message.deletedAt !== undefined ? (\n            <div className=\"lb-ai-chat-message-deleted\">\n              {$.AI_CHAT_MESSAGE_DELETED}\n            </div>\n          ) : (\n            <AiMessage.Content\n              className=\"lb-ai-chat-message-content\"\n              message={message}\n              components={{\n                TextPart: (props) => (\n                  <TextPart {...props} components={components} />\n                ),\n              }}\n            />\n          )}\n        </div>\n      );\n    }\n  )\n);\n"],"names":["jsx","Prose","memo","forwardRef","overrides","useOverrides","cn","AiMessage.Content","props"],"mappings":";;;;;;;;;AA6CA,SAAS,QAAS,CAAA,EAAE,IAAM,EAAA,UAAA,EAA6B,EAAA;AACrD,EAAA,uBACGA,cAAA,CAAAC,WAAA,EAAA;AAAA,IACC,SAAS,IAAK,CAAA,IAAA;AAAA,IACd,SAAU,EAAA,yBAAA;AAAA,IACV,UAAA;AAAA,GACF,CAAA,CAAA;AAEJ,CAAA;AAEO,MAAM,iBAAoB,GAAAC,UAAA;AAAA,EAC/BC,gBAAA;AAAA,IACE,CAAC,EAAE,OAAS,EAAA,SAAA,aAAWC,aAAW,UAAe,EAAA,GAAA,KAAA,IAAS,YAAiB,KAAA;AACzE,MAAM,MAAA,CAAA,GAAIC,uBAAaD,WAAS,CAAA,CAAA;AAChC,MAAA,uBACGJ,cAAA,CAAA,KAAA,EAAA;AAAA,QACC,GAAK,EAAA,YAAA;AAAA,QACL,SAAW,EAAAM,KAAA;AAAA,UACT,4CAAA;AAAA,UACA,SAAA;AAAA,SACF;AAAA,QACC,GAAG,KAAA;AAAA,QAEH,QAAA,EAAA,OAAA,CAAQ,SAAc,KAAA,KAAA,CAAA,mBACpBN,cAAA,CAAA,KAAA,EAAA;AAAA,UAAI,SAAU,EAAA,4BAAA;AAAA,UACZ,QAAE,EAAA,CAAA,CAAA,uBAAA;AAAA,SACL,CAAA,mBAECA,cAAA,CAAAO,aAAA,EAAA;AAAA,UACC,SAAU,EAAA,4BAAA;AAAA,UACV,OAAA;AAAA,UACA,UAAY,EAAA;AAAA,YACV,QAAA,EAAU,CAACC,MAAAA,qBACRR,cAAA,CAAA,QAAA,EAAA;AAAA,cAAU,GAAGQ,MAAAA;AAAA,cAAO,UAAA;AAAA,aAAwB,CAAA;AAAA,WAEjD;AAAA,SACF,CAAA;AAAA,OAEJ,CAAA,CAAA;AAAA,KAEJ;AAAA,GACF;AACF;;;;"}