'use strict';

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var overrides = require('../../overrides.cjs');
var index = require('../../primitives/AiMessage/index.cjs');
var cn = require('../../utils/cn.cjs');
var Prose = require('./Prose.cjs');

function TextPart({ part, components }) {
  return /* @__PURE__ */ jsxRuntime.jsx(Prose.Prose, {
    content: part.text,
    className: "lb-ai-chat-message-text",
    components
  });
}
const AiChatUserMessage = react.memo(
  react.forwardRef(
    ({ message, className, overrides: overrides$1, components, ...props }, forwardedRef) => {
      const $ = overrides.useOverrides(overrides$1);
      return /* @__PURE__ */ jsxRuntime.jsx("div", {
        ref: forwardedRef,
        className: cn.cn(
          "lb-ai-chat-message lb-ai-chat-user-message",
          className
        ),
        ...props,
        children: message.deletedAt !== void 0 ? /* @__PURE__ */ jsxRuntime.jsx("div", {
          className: "lb-ai-chat-message-deleted",
          children: $.AI_CHAT_MESSAGE_DELETED
        }) : /* @__PURE__ */ jsxRuntime.jsx(index.Content, {
          className: "lb-ai-chat-message-content",
          message,
          components: {
            TextPart: (props2) => /* @__PURE__ */ jsxRuntime.jsx(TextPart, {
              ...props2,
              components
            })
          }
        })
      });
    }
  )
);

exports.AiChatUserMessage = AiChatUserMessage;
//# sourceMappingURL=AiChatUserMessage.cjs.map
