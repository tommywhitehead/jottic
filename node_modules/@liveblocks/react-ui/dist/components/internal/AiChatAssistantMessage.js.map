{"version":3,"file":"AiChatAssistantMessage.js","sources":["../../../src/components/internal/AiChatAssistantMessage.tsx"],"sourcesContent":["import type { AiAssistantMessage, WithNavigation } from \"@liveblocks/core\";\nimport {\n  type ComponentProps,\n  forwardRef,\n  memo,\n  type ReactNode,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { type GlobalComponents } from \"../../components\";\nimport { ChevronRightIcon } from \"../../icons/ChevronRight\";\nimport { WarningIcon } from \"../../icons/Warning\";\nimport {\n  type AiChatMessageOverrides,\n  type GlobalOverrides,\n  OverridesProvider,\n  useOverrides,\n} from \"../../overrides\";\nimport * as AiMessage from \"../../primitives/AiMessage\";\nimport { AiMessageToolInvocation } from \"../../primitives/AiMessage/tool-invocation\";\nimport type {\n  AiMessageContentReasoningPartProps,\n  AiMessageContentRetrievalPartProps,\n  AiMessageContentTextPartProps,\n  AiMessageContentToolInvocationPartProps,\n} from \"../../primitives/AiMessage/types\";\nimport * as Collapsible from \"../../primitives/Collapsible\";\nimport type { MarkdownComponents } from \"../../primitives/Markdown\";\nimport { cn } from \"../../utils/cn\";\nimport { ErrorBoundary } from \"../../utils/ErrorBoundary\";\nimport { Prose } from \"./Prose\";\n\ntype UiAssistantMessage = WithNavigation<AiAssistantMessage>;\n\ntype AiChatAssistantMessageComponents = {\n  /**\n   * The components used to render Markdown content.\n   */\n  markdown?: Partial<MarkdownComponents>;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AiChatAssistantMessage\n * -----------------------------------------------------------------------------------------------*/\nexport interface AiChatAssistantMessageProps extends ComponentProps<\"div\"> {\n  /**\n   * The message to display.\n   */\n  message: UiAssistantMessage;\n\n  /**\n   * Override the component's strings.\n   */\n  overrides?: Partial<GlobalOverrides & AiChatMessageOverrides>;\n\n  /**\n   * Override the component's components.\n   */\n  components?: Partial<GlobalComponents & AiChatAssistantMessageComponents>;\n}\n\ninterface TextPartProps extends AiMessageContentTextPartProps {\n  components?: Partial<GlobalComponents & AiChatAssistantMessageComponents>;\n}\n\ninterface ReasoningPartProps extends AiMessageContentReasoningPartProps {\n  components?: Partial<GlobalComponents & AiChatAssistantMessageComponents>;\n}\n\ninterface RetrievalPartProps extends AiMessageContentRetrievalPartProps {\n  components?: Partial<GlobalComponents & AiChatAssistantMessageComponents>;\n}\n\nexport const AiChatAssistantMessage = memo(\n  forwardRef<HTMLDivElement, AiChatAssistantMessageProps>(\n    ({ message, className, overrides, components, ...props }, forwardedRef) => {\n      const $ = useOverrides(overrides);\n\n      let children: ReactNode = null;\n\n      if (message.deletedAt !== undefined) {\n        children = (\n          <div className=\"lb-ai-chat-message-deleted\">\n            {$.AI_CHAT_MESSAGE_DELETED}\n          </div>\n        );\n      } else if (\n        message.status === \"generating\" ||\n        message.status === \"awaiting-tool\"\n      ) {\n        if (message.contentSoFar.length === 0) {\n          children = (\n            <div className=\"lb-ai-chat-message-thinking lb-ai-chat-pending\">\n              {$.AI_CHAT_MESSAGE_THINKING}\n            </div>\n          );\n        } else {\n          children = (\n            <AssistantMessageContent\n              message={message}\n              components={components}\n            />\n          );\n        }\n      } else if (message.status === \"completed\") {\n        children = (\n          <AssistantMessageContent message={message} components={components} />\n        );\n      } else if (message.status === \"failed\") {\n        // Do not include the error message if the user aborted the request.\n        if (message.errorReason === \"Aborted by user\") {\n          children = (\n            <AssistantMessageContent\n              message={message}\n              components={components}\n            />\n          );\n        } else {\n          children = (\n            <>\n              <AssistantMessageContent\n                message={message}\n                components={components}\n              />\n\n              <div className=\"lb-ai-chat-message-error\">\n                <span className=\"lb-icon-container\">\n                  <WarningIcon />\n                </span>\n                {message.errorReason}\n              </div>\n            </>\n          );\n        }\n      }\n\n      return (\n        <div\n          className={cn(\n            \"lb-ai-chat-message lb-ai-chat-assistant-message\",\n            className\n          )}\n          {...props}\n          ref={forwardedRef}\n        >\n          <OverridesProvider overrides={overrides}>\n            {children}\n          </OverridesProvider>\n        </div>\n      );\n    }\n  )\n);\n\nfunction AssistantMessageContent({\n  message,\n  components,\n}: {\n  message: UiAssistantMessage;\n  components?: Partial<GlobalComponents & AiChatAssistantMessageComponents>;\n}) {\n  const ref = useRef(components);\n  const BoundTextPart = useMemo(\n    () => (props: TextPartProps) => (\n      <TextPart {...props} components={ref.current} />\n    ),\n    []\n  );\n  const BoundReasoningPart = useMemo(\n    () => (props: ReasoningPartProps) => (\n      <ReasoningPart {...props} components={ref.current} />\n    ),\n    []\n  );\n  return (\n    <AiMessage.Content\n      message={message}\n      components={{\n        TextPart: BoundTextPart,\n        ReasoningPart: BoundReasoningPart,\n        RetrievalPart,\n        ToolInvocationPart,\n      }}\n      className=\"lb-ai-chat-message-content\"\n    />\n  );\n}\n\n/* -------------------------------------------------------------------------------------------------\n * TextPart\n * -----------------------------------------------------------------------------------------------*/\nfunction TextPart({ part, components, isStreaming }: TextPartProps) {\n  return (\n    <Prose\n      content={part.text}\n      className=\"lb-ai-chat-message-text\"\n      components={components}\n      partial={isStreaming}\n    />\n  );\n}\n\n/* -------------------------------------------------------------------------------------------------\n * ReasoningPart\n * -----------------------------------------------------------------------------------------------*/\nfunction ReasoningPart({ part, isStreaming, components }: ReasoningPartProps) {\n  // Start collapsed if reasoning is already done.\n  const [isOpen, setIsOpen] = useState(isStreaming);\n  const $ = useOverrides();\n\n  // Auto-collapse when reasoning is done, while still allowing the user to\n  // open/collapse it manually during and after it's done.\n  useEffect(() => {\n    if (!isStreaming) {\n      setIsOpen(false);\n    }\n  }, [isStreaming]);\n\n  return (\n    <Collapsible.Root\n      className=\"lb-collapsible lb-ai-chat-message-reasoning\"\n      open={isOpen}\n      onOpenChange={setIsOpen}\n    >\n      <Collapsible.Trigger\n        className={cn(\n          \"lb-collapsible-trigger\",\n          isStreaming && \"lb-ai-chat-pending\"\n        )}\n      >\n        {$.AI_CHAT_MESSAGE_REASONING(isStreaming, part)}\n        <span className=\"lb-collapsible-chevron lb-icon-container\">\n          <ChevronRightIcon />\n        </span>\n      </Collapsible.Trigger>\n\n      <Collapsible.Content className=\"lb-collapsible-content\">\n        <Prose\n          content={part.text}\n          partial={isStreaming}\n          components={components}\n        />\n      </Collapsible.Content>\n    </Collapsible.Root>\n  );\n}\n\n/* -------------------------------------------------------------------------------------------------\n * RetrievalPart\n * -----------------------------------------------------------------------------------------------*/\nfunction RetrievalPart({ part, isStreaming }: RetrievalPartProps) {\n  const $ = useOverrides();\n\n  return (\n    <div\n      className={cn(\n        \"lb-ai-chat-message-retrieval\",\n        isStreaming && \"lb-ai-chat-pending\"\n      )}\n    >\n      {$.AI_CHAT_MESSAGE_RETRIEVAL(isStreaming, part)}\n    </div>\n  );\n}\n\n/* -------------------------------------------------------------------------------------------------\n * ToolInvocationPart\n * -----------------------------------------------------------------------------------------------*/\nfunction ToolInvocationPart({\n  part,\n  message,\n}: AiMessageContentToolInvocationPartProps) {\n  return (\n    <div className=\"lb-ai-chat-message-tool-invocation\">\n      <ErrorBoundary\n        fallback={\n          <div className=\"lb-ai-chat-message-error\">\n            <span className=\"lb-icon-container\">\n              <WarningIcon />\n            </span>\n            <p>\n              Failed to render tool call result for <code>{part.name}</code>.\n              See console for details.\n            </p>\n          </div>\n        }\n      >\n        <AiMessageToolInvocation part={part} message={message} />\n      </ErrorBoundary>\n    </div>\n  );\n}\n"],"names":["AiMessage.Content","Collapsible.Root","Collapsible.Trigger","Collapsible.Content"],"mappings":"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"}