import { R as RegisterAiKnowledgeProps, w as RegisterAiToolProps } from './room-BtcL74U0.js';
export { C as ClientContext, L as LiveblocksProvider, M as MutationContext, y as RoomContext, K as RoomProvider, S as SendAiMessageOptions, U as UseSendAiMessageOptions, x as UseThreadsOptions, A as createLiveblocksContext, J as createRoomContext, N as useAddReaction, aG as useAiChat, aI as useAiChatMessages, aH as useAiChats, as as useAttachmentUrl, O as useBroadcastEvent, P as useCanRedo, Q as useCanUndo, z as useClient, ay as useCreateAiChat, T as useCreateComment, V as useCreateThread, az as useDeleteAiChat, B as useDeleteAllInboxNotifications, W as useDeleteComment, D as useDeleteInboxNotification, X as useDeleteThread, Y as useEditComment, Z as useEditThreadMetadata, E as useErrorListener, a3 as useEventListener, aD as useGroupInfo, a4 as useHistory, ak as useHistoryVersionData, at as useHistoryVersions, _ as useInboxNotificationThread, av as useInboxNotifications, a5 as useIsInsideRoom, a6 as useLostConnectionListener, F as useMarkAllInboxNotificationsAsRead, H as useMarkInboxNotificationAsRead, a7 as useMarkThreadAsRead, $ as useMarkThreadAsResolved, a0 as useMarkThreadAsUnresolved, a8 as useMutation, a9 as useMyPresence, aw as useNotificationSettings, al as useOther, am as useOthers, an as useOthersConnectionIds, aa as useOthersListener, ao as useOthersMapped, ab as useRedo, ac as useRemoveReaction, ad as useRoom, aC as useRoomInfo, au as useRoomSubscriptionSettings, ap as useSelf, aA as useSendAiMessage, ae as useStatus, aq as useStorage, af as useStorageRoot, a1 as useSubscribeToThread, I as useSyncStatus, ag as useThreadSubscription, ar as useThreads, ah as useUndo, aE as useUnreadInboxNotificationsCount, a2 as useUnsubscribeFromThread, ai as useUpdateMyPresence, ax as useUpdateNotificationSettings, aj as useUpdateRoomSubscriptionSettings, aF as useUser, aB as useUserThreads_experimental } from './room-BtcL74U0.js';
export { Json, JsonObject, isNotificationChannelEnabled, shallow } from '@liveblocks/client';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as react from 'react';
import { ReactNode } from 'react';
import '@liveblocks/core';

type Props = {
    fallback: ReactNode;
    children: (() => ReactNode | undefined) | ReactNode | undefined;
};
/**
 * Almost like a normal <Suspense> component, except that for server-side
 * renders, the fallback will be used.
 *
 * The child props will have to be provided in a function, i.e. change:
 *
 *   <Suspense fallback={<Loading />}>
 *     <MyRealComponent a={1} />
 *   </Suspense>
 *
 * To:
 *
 *   <ClientSideSuspense fallback={<Loading />}>
 *     <MyRealComponent a={1} />
 *   </ClientSideSuspense>
 *
 */
declare function ClientSideSuspense(props: Props): react_jsx_runtime.JSX.Element;

/**
 * Make knowledge about your application state available to any AI used in
 * a chat or a one-off request.
 *
 * For example:
 *
 *     <RegisterAiKnowledge
 *        description="The current mode of my application"
 *        value="dark" />
 *
 *     <RegisterAiKnowledge
 *        description="The current list of todos"
 *        value={todos} />
 *
 * By mounting this component, the AI will get access to this knwoledge.
 * By unmounting this component, the AI will no longer have access to it.
 * It can choose to use or ignore this knowledge in its responses.
 */
declare const RegisterAiKnowledge: react.NamedExoticComponent<RegisterAiKnowledgeProps>;
/**
 * Make a tool available to your AI chat or a one-off request.
 * A tool is a piece of functionality that the AI can call to perform an action
 * or look up information on the user's behalf.
 *
 * Also, tools are used to render custom UIs for tool invocations, which are
 * embedded inside the AI chat.
 *
 * For example:
 *
 *   <RegisterAiTool
 *     name="list-todos"
 *     tool={defineAiTool()({ ... })}
 *     />
 *
 * Or scoped to a specific chat:
 *
 *   <RegisterAiTool
 *     name="list-todos"
 *     tool={defineAiTool()({ ... })}
 *     chatId="chat-1234"
 *     />
 *
 * By mounting this component, the tool is made available.
 * By unmounting this component, the tool will no longer be available.
 */
declare const RegisterAiTool: react.NamedExoticComponent<RegisterAiToolProps>;

export { ClientSideSuspense, RegisterAiKnowledge, RegisterAiKnowledgeProps, RegisterAiTool, RegisterAiToolProps };
